[
  {
    "params": [
      {
        "type": "wh_t",
        "name": "w",
        "desc": "LCD宽度。"
      },
      {
        "type": "wh_t",
        "name": "h",
        "desc": "LCD高度。"
      },
      {
        "type": "app_type_t",
        "name": "app_type",
        "desc": "应用程序的类型。"
      },
      {
        "type": "const char*",
        "name": "app_name",
        "desc": "应用程序的名称(必须为常量字符串)。"
      },
      {
        "type": "const char*",
        "name": "app_root",
        "desc": "应用程序的根目录，用于定位资源文件(必须为常量字符串)。"
      }
    ],
    "annotation": {
      "global": true
    },
    "desc": "初始化TK。",
    "name": "tk_init",
    "return": {
      "type": "ret_t",
      "desc": "返回RET_OK表示成功，否则表示失败。"
    },
    "type": "method",
    "header": "src/awtk.h"
  },
  {
    "params": [],
    "annotation": {
      "global": true
    },
    "desc": "进入TK事件主循环。",
    "name": "tk_run",
    "return": {
      "type": "ret_t",
      "desc": "返回RET_OK表示成功，否则表示失败。"
    },
    "type": "method",
    "header": "src/awtk.h"
  },
  {
    "params": [],
    "annotation": {
      "scriptable": true,
      "global": true
    },
    "desc": "退出TK事件主循环。",
    "name": "tk_quit",
    "return": {
      "type": "ret_t",
      "desc": "返回RET_OK表示成功，否则表示失败。"
    },
    "type": "method",
    "header": "src/awtk.h"
  },
  {
    "params": [
      {
        "type": "int",
        "name": "orientation",
        "desc": "旋转方向。"
      }
    ],
    "annotation": {
      "global": true
    },
    "desc": "设置屏幕的旋转方向(XXX:目前仅支持0度和90度)。",
    "name": "tk_set_lcd_orientation",
    "return": {
      "type": "ret_t",
      "desc": "返回RET_OK表示成功，否则表示失败。"
    },
    "type": "method",
    "header": "src/awtk.h"
  },
  {
    "params": [],
    "annotation": {
      "global": true,
      "private": true
    },
    "desc": "初始化资源。",
    "name": "tk_init_assets",
    "return": {
      "type": "ret_t",
      "desc": "返回RET_OK表示成功，否则表示失败。"
    },
    "type": "method",
    "header": "src/awtk.h"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建app_bar对象",
        "name": "app_bar_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "app_bar对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为app_bar对象(供脚本语言使用)。",
        "name": "app_bar_cast",
        "return": {
          "type": "widget_t*",
          "desc": "app_bar对象。"
        }
      }
    ],
    "properties": [],
    "header": "base/app_bar.h",
    "desc": "app_bar。一个简单的容器控件，一般在窗口的顶部。它本身不提供布局功能(可用layout参数指定)，和view功能一致，仅提供具有语义的标签，让xml更具有可读性。",
    "name": "app_bar_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint16_t*",
            "name": "capacity",
            "desc": "数组的初始容量。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建array对象",
        "name": "array_create",
        "return": {
          "type": "array_t*",
          "desc": "数组对象。"
        }
      },
      {
        "params": [
          {
            "type": "array_t*",
            "name": "array",
            "desc": "数组对象。"
          },
          {
            "type": "uint16_t*",
            "name": "capacity",
            "desc": "数组的初始容量。"
          }
        ],
        "annotation": {},
        "desc": "初始化array对象",
        "name": "array_init",
        "return": {
          "type": "array_t*",
          "desc": "数组对象。"
        }
      },
      {
        "params": [
          {
            "type": "array_t*",
            "name": "array",
            "desc": "数组对象。"
          },
          {
            "type": "tk_compare_t",
            "name": "cmp",
            "desc": "比较函数，为NULL时直接比较指针。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "查找第一个满足条件的元素。",
        "name": "array_find",
        "return": {
          "type": "void*",
          "desc": "如果找到，返回满足条件的对象，否则返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "array_t*",
            "name": "array",
            "desc": "数组对象。"
          },
          {
            "type": "tk_compare_t",
            "name": "cmp",
            "desc": "比较函数，为NULL时直接比较指针。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "查找第一个满足条件的元素，并返回位置。",
        "name": "array_find_index",
        "return": {
          "type": "int",
          "desc": "如果找到，返回满足条件的对象的位置，否则返回-1。"
        }
      },
      {
        "params": [
          {
            "type": "array_t*",
            "name": "array",
            "desc": "数组对象。"
          },
          {
            "type": "tk_compare_t",
            "name": "cmp",
            "desc": "比较函数，为NULL时直接比较指针。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          },
          {
            "type": "tk_destroy_t",
            "name": "destroy",
            "desc": "销毁元素的回调函数。"
          }
        ],
        "annotation": {},
        "desc": "删除第一个满足条件的元素。",
        "name": "array_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "array_t*",
            "name": "array",
            "desc": "数组对象。"
          },
          {
            "type": "tk_compare_t",
            "name": "cmp",
            "desc": "比较函数，为NULL时直接比较指针。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          },
          {
            "type": "tk_destroy_t",
            "name": "destroy",
            "desc": "销毁元素的回调函数。"
          }
        ],
        "annotation": {},
        "desc": "删除全部满足条件的元素。",
        "name": "array_remove_all",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "array_t*",
            "name": "array",
            "desc": "数组对象。"
          }
        ],
        "annotation": {},
        "desc": "弹出最后一个元素。",
        "name": "array_pop",
        "return": {
          "type": "void*",
          "desc": "成功返回最后一个元素，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "array_t*",
            "name": "array",
            "desc": "数组对象。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "待追加的元素。"
          }
        ],
        "annotation": {},
        "desc": "在尾巴追加一个元素。",
        "name": "array_push",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "array_t*",
            "name": "array",
            "desc": "数组对象。"
          }
        ],
        "annotation": {},
        "desc": "清除数组中的元素。",
        "name": "array_deinit",
        "return": {
          "type": "void",
          "desc": "无。"
        }
      },
      {
        "params": [
          {
            "type": "array_t*",
            "name": "array",
            "desc": "数组对象。"
          }
        ],
        "annotation": {},
        "desc": "清除数组中的元素，并释放数组对象。",
        "name": "array_destroy",
        "return": {
          "type": "void",
          "desc": "无。"
        }
      }
    ],
    "properties": [
      {
        "name": "size",
        "desc": "数组中元素的个数。",
        "type": "uint16_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "capacity",
        "desc": "数组的容量大小。",
        "type": "uint16_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "elms",
        "desc": "数组中的元素。",
        "type": "void**",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/array.h",
    "desc": "动态数组，根据元素个数动态调整数组的容量。",
    "name": "array_t"
  },
  {
    "type": "enum",
    "desc": "资源类型常量定义。",
    "consts": [
      {
        "desc": "无效资源。",
        "name": "ASSET_TYPE_NONE"
      },
      {
        "desc": "字体资源。",
        "name": "ASSET_TYPE_FONT"
      },
      {
        "desc": "图片资源。",
        "name": "ASSET_TYPE_IMAGE"
      },
      {
        "desc": "主题资源。",
        "name": "ASSET_TYPE_STYLE"
      },
      {
        "desc": "UI数据资源。",
        "name": "ASSET_TYPE_UI"
      },
      {
        "desc": "XML数据资源。",
        "name": "ASSET_TYPE_XML"
      },
      {
        "desc": "字符串数据资源。",
        "name": "ASSET_TYPE_STRINGS"
      },
      {
        "desc": "其它数据资源。",
        "name": "ASSET_TYPE_DATA"
      }
    ],
    "header": "base/assets_manager.h",
    "name": "asset_type_t",
    "prefix": "ASSET_TYPE_",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "enum",
    "desc": "字体资源类型定义。",
    "consts": [],
    "header": "base/assets_manager.h",
    "name": "asset_font_type_t",
    "prefix": "ASSET_FONT_TYPE_"
  },
  {
    "type": "enum",
    "desc": "图片资源类型定义。",
    "consts": [],
    "header": "base/assets_manager.h",
    "name": "asset_image_type_t",
    "prefix": "ASSET_IMAGE_TYPE_"
  },
  {
    "type": "enum",
    "desc": "UI资源类型定义。",
    "consts": [],
    "header": "base/assets_manager.h",
    "name": "asset_ui_type_t",
    "prefix": "ASSET_UI_TYPE_"
  },
  {
    "type": "class",
    "methods": [],
    "properties": [],
    "header": "base/assets_manager.h",
    "desc": "预加载资源的描述信息。",
    "name": "preload_res_t"
  },
  {
    "type": "class",
    "methods": [],
    "properties": [
      {
        "name": "type",
        "desc": "类型。",
        "type": "uint16_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "subtype",
        "desc": "子类型。",
        "type": "uint8_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "is_in_rom",
        "desc": "资源是否在ROM中。",
        "type": "uint8_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "size",
        "desc": "大小。",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "refcount",
        "desc": "引用计数。is_in_rom == FALSE时才有效。",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "name",
        "desc": "名称。",
        "type": "char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/assets_manager.h",
    "desc": "单个资源的描述信息。",
    "name": "asset_info_t",
    "annotation": {
      "constructor": true,
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "获取缺省资源管理器。",
        "name": "assets_manager",
        "alias": "assets_manager_instance",
        "return": {
          "type": "assets_manager_t*",
          "desc": "返回asset manager对象。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "rm",
            "desc": "asset manager对象。"
          }
        ],
        "annotation": {},
        "desc": "设置缺省资源管理器。",
        "name": "assets_manager_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "init_nr",
            "desc": "预先分配资源的个数。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建资源管理器。",
        "name": "assets_manager_create",
        "return": {
          "type": "assets_manager_t*",
          "desc": "返回asset manager对象。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "rm",
            "desc": "asset manager对象。"
          },
          {
            "type": "uint32_t",
            "name": "init_nr",
            "desc": "预先分配资源的个数。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始化资源管理器。",
        "name": "assets_manager_init",
        "return": {
          "type": "assets_manager_t*",
          "desc": "返回asset manager对象。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "rm",
            "desc": "asset manager对象。"
          },
          {
            "type": "asset_info_t",
            "name": "info",
            "desc": "待增加的资源。"
          }
        ],
        "annotation": {},
        "desc": "向资源管理器中增加一个资源。",
        "name": "assets_manager_add",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "rm",
            "desc": "asset manager对象。"
          },
          {
            "type": "asset_type_t",
            "name": "type",
            "desc": "资源的类型。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "资源的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "在资源管理器的缓存中查找指定的资源并引用它，如果缓存中不存在，尝试加载该资源。",
        "name": "assets_manager_ref",
        "return": {
          "type": "asset_info_t*",
          "desc": "返回资源。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "rm",
            "desc": "asset manager对象。"
          },
          {
            "type": "asset_info_t*",
            "name": "info",
            "desc": "资源。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "释放指定的资源。",
        "name": "assets_manager_unref",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "rm",
            "desc": "asset manager对象。"
          },
          {
            "type": "asset_type_t",
            "name": "type",
            "desc": "资源的类型。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "资源的名称。"
          }
        ],
        "annotation": {},
        "desc": "在资源管理器的缓存中查找指定的资源(不引用)。",
        "name": "assets_manager_find_in_cache",
        "return": {
          "type": "asset_info_t*",
          "desc": "返回资源。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "rm",
            "desc": "asset manager对象。"
          },
          {
            "type": "asset_type_t",
            "name": "type",
            "desc": "资源的类型。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "资源的名称。"
          }
        ],
        "annotation": {},
        "desc": "从文件系统中加载指定的资源，并缓存到内存中。在定义了宏WITH_FS_RES时才生效。",
        "name": "assets_manager_load",
        "return": {
          "type": "asset_info_t*",
          "desc": "返回资源。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "rm",
            "desc": "asset manager对象。"
          },
          {
            "type": "asset_type_t",
            "name": "type",
            "desc": "资源的类型。"
          }
        ],
        "annotation": {},
        "desc": "清除指定类型的缓存。",
        "name": "assets_manager_clear_cache",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "rm",
            "desc": "asset manager对象。"
          }
        ],
        "annotation": {},
        "desc": "释放全部资源。",
        "name": "assets_manager_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "assets_manager_t*",
            "name": "rm",
            "desc": "asset manager对象。"
          }
        ],
        "annotation": {},
        "desc": "释放全部资源并销毁asset manager对象。",
        "name": "assets_manager_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [],
    "header": "base/assets_manager.h",
    "desc": "资源管理器。",
    "name": "assets_manager_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "enum",
    "desc": "位图格式常量定义。",
    "consts": [
      {
        "desc": "无效格式。",
        "name": "BITMAP_FMT_NONE"
      },
      {
        "desc": "一个像素占用4个字节，RGBA占一个字节，按内存地址递增。",
        "name": "BITMAP_FMT_RGBA8888"
      },
      {
        "desc": "一个像素占用4个字节，ABGR占一个字节，按内存地址递增。",
        "name": "BITMAP_FMT_ABGR8888"
      },
      {
        "desc": "一个像素占用4个字节，BGRA占一个字节，按内存地址递增。",
        "name": "BITMAP_FMT_BGRA8888"
      },
      {
        "desc": "一个像素占用4个字节，ARGB占一个字节，按内存地址递增。",
        "name": "BITMAP_FMT_ARGB8888"
      },
      {
        "desc": "一个像素占用2个字节，RGB分别占用5,6,5位, 按内存地址递增。",
        "name": "BITMAP_FMT_RGB565"
      },
      {
        "desc": "一个像素占用2个字节，BGR分别占用5,6,5位, 按内存地址递增。",
        "name": "BITMAP_FMT_BGR565"
      },
      {
        "desc": "一个像素占用3个字节，RGB占一个字节，按内存地址递增。",
        "name": "BITMAP_FMT_RGB888"
      },
      {
        "desc": "一个像素占用3个字节，RGB占一个字节，按内存地址递增。",
        "name": "BITMAP_FMT_BGR888"
      }
    ],
    "header": "base/bitmap.h",
    "name": "bitmap_format_t",
    "prefix": "BITMAP_FMT_",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "enum",
    "desc": "位图标志常量定义。",
    "consts": [
      {
        "desc": "无特殊标志。",
        "name": "BITMAP_FLAG_NONE"
      },
      {
        "desc": "不透明图片。",
        "name": "BITMAP_FLAG_OPAQUE"
      },
      {
        "desc": "图片内容不会变化。",
        "name": "BITMAP_FLAG_IMMUTABLE"
      },
      {
        "desc": "OpenGL Texture, bitmap的id是有效的texture id。",
        "name": "BITMAP_FLAG_TEXTURE"
      },
      {
        "desc": "如果是MUTABLE的图片，更新时需要设置此标志，底层可能会做特殊处理，比如更新图片到GPU。",
        "name": "BITMAP_FLAG_CHANGED"
      }
    ],
    "header": "base/bitmap.h",
    "name": "bitmap_flag_t",
    "prefix": "BITMAP_FLAG_",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建图片对象(一般供脚本语言中使用)。",
        "name": "bitmap_create",
        "return": {
          "type": "bitmap_t*",
          "desc": "返回bitmap对象。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "uint32_t",
            "name": "h",
            "desc": "高度。"
          },
          {
            "type": "bitmap_format_t",
            "name": "format",
            "desc": "格式。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建图片对象。",
        "name": "bitmap_create_ex",
        "return": {
          "type": "bitmap_t*",
          "desc": "返回bitmap对象。"
        }
      },
      {
        "params": [
          {
            "type": "bitmap_t*",
            "name": "bitmap",
            "desc": "bitmap对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取图片一个像素占用的字节数。",
        "name": "bitmap_get_bpp",
        "return": {
          "type": "uint32_t",
          "desc": "返回一个像素占用的字节数。"
        }
      },
      {
        "params": [
          {
            "type": "bitmap_t*",
            "name": "bitmap",
            "desc": "bitmap对象。"
          },
          {
            "type": "uint32_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "uint32_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "rgba_t*",
            "name": "rgba",
            "desc": "返回颜色值。"
          }
        ],
        "annotation": {},
        "desc": "获取图片指定像素的rgba颜色值(主要用于测试程序)。",
        "name": "bitmap_get_pixel",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "bitmap_t*",
            "name": "bitmap",
            "desc": "bitmap对象。"
          },
          {
            "type": "uint32_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "uint32_t",
            "name": "h",
            "desc": "高度。"
          },
          {
            "type": "bitmap_format_t",
            "name": "format",
            "desc": "格式。"
          },
          {
            "type": "const uint8_t*",
            "name": "",
            "desc": "a"
          },
          {
            "type": "uint32_t",
            "name": "comp",
            "desc": "颜色通道数(目前支持3(rgb)和4(rgba))。"
          }
        ],
        "annotation": {},
        "desc": "初始化图片。数据。3通道时为RGB888格式，4通道时为RGBA888格式(内部拷贝该数据，不会引用，调用者自行释放)。",
        "name": "bitmap_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "bitmap_t*",
            "name": "bitmap",
            "desc": "bitmap对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true
        },
        "desc": "销毁图片。",
        "name": "bitmap_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "w",
        "desc": "宽度。",
        "type": "wh_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "h",
        "desc": "高度。",
        "type": "wh_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "flags",
        "desc": "标志。请参考{bitmap_flag_t}。",
        "type": "uint16_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "format",
        "desc": "格式。请参考{bitmap_format_t}。",
        "type": "uint16_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "name",
        "desc": "名称。",
        "type": "char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "data",
        "desc": "图片数据。",
        "type": "uint8_t*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/bitmap.h",
    "desc": "位图。",
    "name": "bitmap_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "enum",
    "desc": "图片绘制方法常量定义。",
    "consts": [
      {
        "desc": "缺省显示。将图片按原大小显示在目标矩形的左上角。",
        "name": "IMAGE_DRAW_DEFAULT"
      },
      {
        "desc": "居中显示。将图片按原大小显示在目标矩形的中央。",
        "name": "IMAGE_DRAW_CENTER"
      },
      {
        "desc": "图标显示。同居中显示，但会根据屏幕密度调整大小。",
        "name": "IMAGE_DRAW_ICON"
      },
      {
        "desc": "缩放显示。将图片缩放至目标矩形的大小(不保证宽高成比例)。",
        "name": "IMAGE_DRAW_SCALE"
      },
      {
        "desc": "自动缩放显示。将图片缩放至目标矩形的宽度或高度(选取最小的比例)，并居中显示。",
        "name": "IMAGE_DRAW_SCALE_AUTO"
      },
      {
        "desc": "宽度缩放显示。 将图片缩放至目标矩形的宽度，高度按此比例进行缩放，超出不部分不显示。",
        "name": "IMAGE_DRAW_SCALE_W"
      },
      {
        "desc": "高度缩放显示。将图片缩放至目标矩形的高度，宽度按此比例进行缩放，超出不部分不显示。",
        "name": "IMAGE_DRAW_SCALE_H"
      },
      {
        "desc": "平铺显示。",
        "name": "IMAGE_DRAW_REPEAT"
      },
      {
        "desc": "水平方向平铺显示，垂直方向缩放。",
        "name": "IMAGE_DRAW_REPEAT_X"
      },
      {
        "desc": "垂直方向平铺显示，水平方向缩放。",
        "name": "IMAGE_DRAW_REPEAT_Y"
      },
      {
        "desc": "9宫格显示。将图片分成等大小的9块，4个角按原大小显示在目标矩形的4个角，左右上下和中间5块分别缩放显示在对应的目标区域。",
        "name": "IMAGE_DRAW_PATCH9"
      },
      {
        "desc": "水平方向3宫格显示，垂直方向居中显示。将图片在水平方向上分成等大小的3块，左右两块按原大小显示在目标矩形的左右，中间一块缩放显示在目标区域中间剩余部分。",
        "name": "IMAGE_DRAW_PATCH3_X"
      },
      {
        "desc": "垂直方向3宫格显示，水平方向居中显示。将图片在垂直方向上分成等大小的3块，上下两块按原大小显示在目标矩形的上下，中间一块缩放显示在目标区域中间剩余部分。",
        "name": "IMAGE_DRAW_PATCH3_Y"
      },
      {
        "desc": "水平方向3宫格显示，垂直方向缩放显示。将图片在水平方向上分成等大小的3块，左右两块按原大小显示在目标矩形的左右，中间一块缩放显示在目标区域中间剩余部分。",
        "name": "IMAGE_DRAW_PATCH3_X_SCALE_Y"
      },
      {
        "desc": "垂直方向3宫格显示，水平方向缩放显示。将图片在垂直方向上分成等大小的3块，上下两块按原大小显示在目标矩形的上下，中间一块缩放显示在目标区域中间剩余部分。",
        "name": "IMAGE_DRAW_PATCH3_Y_SCALE_X"
      }
    ],
    "header": "base/bitmap.h",
    "name": "image_draw_type_t",
    "prefix": "IMAGE_DRAW_",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "uint8_t*",
            "name": "data",
            "desc": "缓冲区。"
          },
          {
            "type": "uint16_t",
            "name": "capacity",
            "desc": "缓冲区的容量。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始wbuffer对象。",
        "name": "wbuffer_init",
        "return": {
          "type": "wbuffer_t*",
          "desc": "wbuffer对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "int32_t",
            "name": "offset",
            "desc": "跳过的偏移量，正数往前负数往回跳。"
          }
        ],
        "annotation": {},
        "desc": "跳过指定的长度。",
        "name": "wbuffer_skip",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "uint8_t",
            "name": "value",
            "desc": "写入的数据。"
          }
        ],
        "annotation": {},
        "desc": "写入uint8数据。",
        "name": "wbuffer_write_uint8",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "uint16_t",
            "name": "value",
            "desc": "写入的数据。"
          }
        ],
        "annotation": {},
        "desc": "写入uint16数据。",
        "name": "wbuffer_write_uint16",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "uint32_t",
            "name": "value",
            "desc": "写入的数据。"
          }
        ],
        "annotation": {},
        "desc": "写入uint32数据。",
        "name": "wbuffer_write_uint32",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "写入的数据。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "写入的数据长度。"
          }
        ],
        "annotation": {},
        "desc": "写入指定长度的二进制数据。",
        "name": "wbuffer_write_binary",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "char*",
            "name": "data",
            "desc": "写入的字符串。"
          }
        ],
        "annotation": {},
        "desc": "写入字符串。",
        "name": "wbuffer_write_string",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "data",
        "desc": "缓存区。",
        "type": "uint8_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "cursor",
        "desc": "当前写入位置。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "capacity",
        "desc": "缓存区最大容量。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/buffer.h",
    "desc": "write buffer，用于数据打包。",
    "name": "wbuffer_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "uint8_t*",
            "name": "data",
            "desc": "缓冲区。"
          },
          {
            "type": "uint16_t",
            "name": "capacity",
            "desc": "缓冲区的容量。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始rbuffer对象。",
        "name": "rbuffer_init",
        "return": {
          "type": "rbuffer_t*",
          "desc": "rbuffer对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          }
        ],
        "annotation": {},
        "desc": "判断是否还有数据可读。",
        "name": "rbuffer_has_more",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示还有数据可读，否则表示无数据可读。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "int32_t",
            "name": "offset",
            "desc": "跳过的偏移量，正数往前负数往回跳。"
          }
        ],
        "annotation": {},
        "desc": "跳过指定的长度。",
        "name": "rbuffer_skip",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "uint8_t*",
            "name": "value",
            "desc": "读取的数据。"
          }
        ],
        "annotation": {},
        "desc": "读取uint8数据。",
        "name": "rbuffer_read_uint8",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "uint16_t*",
            "name": "value",
            "desc": "读取的数据。"
          }
        ],
        "annotation": {},
        "desc": "读取uint16数据。",
        "name": "rbuffer_read_uint16",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "uint32_t*",
            "name": "value",
            "desc": "读取的数据。"
          }
        ],
        "annotation": {},
        "desc": "读取uint32数据。",
        "name": "rbuffer_read_uint32",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "读取的数据。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "读取的数据长度。"
          }
        ],
        "annotation": {},
        "desc": "读取指定长度的二进制数据。",
        "name": "rbuffer_read_binary",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "char**",
            "name": "str",
            "desc": "用于返回字符串。"
          }
        ],
        "annotation": {},
        "desc": "读取字符串。",
        "name": "rbuffer_read_string",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "uint8_t*",
            "name": "value",
            "desc": "读取的数据。"
          }
        ],
        "annotation": {},
        "desc": "读取uint8数据，但不改变cursor的位置。",
        "name": "rbuffer_peek_uint8",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "uint16_t*",
            "name": "value",
            "desc": "读取的数据。"
          }
        ],
        "annotation": {},
        "desc": "读取uint16数据，但不改变cursor的位置。",
        "name": "rbuffer_peek_uint16",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "uint32_t*",
            "name": "value",
            "desc": "读取的数据。"
          }
        ],
        "annotation": {},
        "desc": "读取uint32数据，但不改变cursor的位置。",
        "name": "rbuffer_peek_uint32",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "data",
        "desc": "缓存区。",
        "type": "uint8_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "cursor",
        "desc": "当前读取位置。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "capacity",
        "desc": "缓存区最大容量。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/buffer.h",
    "desc": "read buffer，用于数据解包。",
    "name": "rbuffer_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建button_group对象",
        "name": "button_group_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "button_group对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为button_group对象(供脚本语言使用)。",
        "name": "button_group_cast",
        "return": {
          "type": "widget_t*",
          "desc": "button_group对象。"
        }
      }
    ],
    "properties": [],
    "header": "base/button_group.h",
    "desc": "Button Group控件。",
    "name": "button_group_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建button对象",
        "name": "button_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "button对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为button对象(供脚本语言使用)。",
        "name": "button_cast",
        "return": {
          "type": "widget_t*",
          "desc": "button对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "repeat",
            "desc": "释放EVT_CLICK事件的时间间隔(毫秒)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置释放EVT_CLICK事件的时间间隔。为0则不重复释放EVT_CLICK事件。",
        "name": "button_set_repeat",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "repeat",
        "desc": "重复释放EVT_CLICK事件的时间间隔。为0则不重复释放EVT_CLICK事件。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/button.h",
    "desc": "按钮控件。",
    "name": "button_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建calibration_win对象",
        "name": "calibration_win_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "calibration_win_on_done_t",
            "name": "on_done",
            "desc": "回调函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "回调函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "设置校准完成的处理函数。",
        "name": "calibration_win_set_on_done",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "calibration_win_on_click_t",
            "name": "on_click",
            "desc": "回调函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "回调函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "设置校准点击事件的处理函数。",
        "name": "calibration_win_set_on_click",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [],
    "header": "base/calibration_win.h",
    "desc": "电阻屏校准屏幕。",
    "name": "calibration_win_t",
    "parent": "widget_t"
  },
  {
    "type": "class",
    "methods": [],
    "properties": [],
    "header": "base/canvas.h",
    "desc": "canvas类。",
    "name": "canvas_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建check_button对象",
        "name": "check_button_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建check_button对象",
        "name": "check_button_create_radio",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "check_button对象。"
          },
          {
            "type": "bool_t",
            "name": "value",
            "desc": "值"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的值。",
        "name": "check_button_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "check_button对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换check_button对象(供脚本语言使用)。",
        "name": "check_button_cast",
        "return": {
          "type": "widget_t*",
          "desc": "check_button对象。"
        }
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": "值。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/check_button.h",
    "desc": "勾选控件。",
    "name": "check_button_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建color_tile对象",
        "name": "color_tile_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "color_tile对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为color_tile对象(供脚本语言使用)。",
        "name": "color_tile_cast",
        "return": {
          "type": "widget_t*",
          "desc": "color_tile对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "color",
            "desc": "背景颜色。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置背景颜色。",
        "name": "color_tile_set_bg_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "color",
            "desc": "边框颜色。"
          }
        ],
        "annotation": {},
        "desc": "设置边框颜色。",
        "name": "color_tile_set_border_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "color_t",
            "name": "color",
            "desc": "背景颜色。"
          }
        ],
        "annotation": {},
        "desc": "设置背景颜色。",
        "name": "color_tile_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "bg_color",
        "desc": "背景颜色。",
        "type": "const char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "border_color",
        "desc": "边框颜色。",
        "type": "const char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/color_tile.h",
    "desc": "色块控件。",
    "name": "color_tile_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建column对象",
        "name": "column_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "column对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为column对象(供脚本语言使用)。",
        "name": "column_cast",
        "return": {
          "type": "widget_t*",
          "desc": "column对象。"
        }
      }
    ],
    "properties": [],
    "header": "base/column.h",
    "desc": "column。一个简单的容器控件，垂直排列一组控件。它本身不提供布局功能(可用layout参数指定)，和view功能一致，仅提供具有语义的标签，让xml更具有可读性。",
    "name": "column_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建combo_box_item对象",
        "name": "combo_box_item_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box_item对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换combo_box_item对象(供脚本语言使用)。",
        "name": "combo_box_item_cast",
        "return": {
          "type": "widget_t*",
          "desc": "combo_box_item对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box_item对象。"
          },
          {
            "type": "bool_t",
            "name": "selected",
            "desc": "是否被选中。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件是否被选中。",
        "name": "combo_box_item_set_selected",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box_item对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的值。",
        "name": "combo_box_item_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": "值。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "selected",
        "desc": "是否被选中。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/combo_box_item.h",
    "desc": "ComboBox Item控件。",
    "name": "combo_box_item_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建combo_box对象",
        "name": "combo_box_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换combo_box对象(供脚本语言使用)。",
        "name": "combo_box_cast",
        "return": {
          "type": "widget_t*",
          "desc": "combo_box对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          },
          {
            "type": "char*",
            "name": "open_window",
            "desc": "弹出窗口的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "点击按钮时可以打开popup窗口，本函数可设置窗口的名称。",
        "name": "combo_box_set_open_window",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "重置所有选项。",
        "name": "combo_box_reset_options",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取选项个数。",
        "name": "combo_box_count_options",
        "return": {
          "type": "int32_t",
          "desc": "返回选项个数。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "选项的索引。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置第index个选项为当前选中的选项。",
        "name": "combo_box_set_selected_index",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "追加一个选项。",
        "name": "combo_box_append_option",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          },
          {
            "type": "char*",
            "name": "options",
            "desc": "选项。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置选项。",
        "name": "combo_box_set_options",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "选项的索引。"
          }
        ],
        "annotation": {},
        "desc": "获取第index个选项。",
        "name": "combo_box_get_option",
        "return": {
          "type": "combo_box_option_t*",
          "desc": "返回index个选项。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取combo_box的值。",
        "name": "combo_box_get_value",
        "return": {
          "type": "int32_t",
          "desc": "返回值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "combo_box对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取combo_box的文本。",
        "name": "combo_box_get_text",
        "return": {
          "type": "char*",
          "desc": "返回文本。"
        }
      }
    ],
    "properties": [
      {
        "name": "open_window",
        "desc": "为点击按钮时，要打开窗口的名称。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "selected_index",
        "desc": "当前选中的选项。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "value",
        "desc": "值。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "options",
        "desc": "设置可选项(冒号分隔值和文本，分号分隔选项，如:1:red;2:green;3:blue)。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/combo_box.h",
    "desc": "combobox控件。",
    "name": "combo_box_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [],
    "properties": [],
    "header": "base/custom_props.h",
    "desc": "widget自定义属性。",
    "name": "custom_prop_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "capacity",
            "desc": "初始容量。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建custom_props对象",
        "name": "custom_props_create",
        "return": {
          "type": "custom_props_t*",
          "desc": "custom_props对象。"
        }
      },
      {
        "params": [
          {
            "type": "custom_props_t",
            "name": "props",
            "desc": "属性集合对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "用于返回属性的值。"
          }
        ],
        "annotation": {},
        "desc": "获取属性的值。",
        "name": "custom_props_get",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "custom_props_t",
            "name": "props",
            "desc": "属性集合对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "属性的值。"
          }
        ],
        "annotation": {},
        "desc": "设置属性的值。",
        "name": "custom_props_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "custom_props_t",
            "name": "props",
            "desc": "属性集合对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁属性集合。",
        "name": "custom_props_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [],
    "header": "base/custom_props.h",
    "desc": "widget自定义属性集合。",
    "name": "custom_props_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建dialog对象。",
        "name": "dialog_client_create",
        "return": {
          "type": "widget_t*",
          "desc": "dialog对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog_client对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为dialog_client对象(供脚本语言使用)。",
        "name": "dialog_client_cast",
        "return": {
          "type": "widget_t*",
          "desc": "dialog_client对象。"
        }
      }
    ],
    "properties": [],
    "header": "base/dialog_client.h",
    "desc": "对话框客户区控件。",
    "name": "dialog_client_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建dialog对象。",
        "name": "dialog_title_create",
        "return": {
          "type": "widget_t*",
          "desc": "dialog对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog_title对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为dialog_title对象(供脚本语言使用)。",
        "name": "dialog_title_cast",
        "return": {
          "type": "widget_t*",
          "desc": "dialog_title对象。"
        }
      }
    ],
    "properties": [],
    "header": "base/dialog_title.h",
    "desc": "对话框标题控件。",
    "name": "dialog_title_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建dialog对象。",
        "name": "dialog_create",
        "return": {
          "type": "widget_t*",
          "desc": "dialog对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建dialog对象，同时创建title/client。",
        "name": "dialog_create_simple",
        "return": {
          "type": "widget_t*",
          "desc": "dialog对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换dialog对象(供脚本语言使用)。",
        "name": "dialog_cast",
        "return": {
          "type": "widget_t*",
          "desc": "dialog对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取title控件。",
        "name": "dialog_get_title",
        "return": {
          "type": "widget_t*",
          "desc": "title对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取client控件。",
        "name": "dialog_get_client",
        "return": {
          "type": "widget_t*",
          "desc": "client对象。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "name",
            "desc": "dialog的名称。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "从资源文件中加载并创建Dialog对象。本函数在ui_loader/ui_builder_default里实现。",
        "name": "dialog_open",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog对象。"
          },
          {
            "type": "char*",
            "name": "title",
            "desc": "标题。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置对话框的标题文本。",
        "name": "dialog_set_title",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "模态显示对话框。dialog_modal返回后，dialog对象将在下一个idle函数中回收，也就是在dialog_modal调用完成后仍然可以访问dialog中控件，直到本次事件结束。",
        "name": "dialog_modal",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dialog对象。"
          },
          {
            "type": "uint32_t",
            "name": "code",
            "desc": "退出码，作为dialog_modal的返回值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "退出模态显示。",
        "name": "dialog_quit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [],
    "header": "base/dialog.h",
    "desc": "对话框控件。",
    "name": "dialog_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建dragger对象。",
        "name": "dragger_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dragger对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为dragger对象(供脚本语言使用)。",
        "name": "dragger_cast",
        "return": {
          "type": "widget_t*",
          "desc": "dragger对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "dragger控件。"
          },
          {
            "type": "xy_t",
            "name": "x_min",
            "desc": "x坐标最小值。"
          },
          {
            "type": "xy_t",
            "name": "y_min",
            "desc": "y坐标最小值。"
          },
          {
            "type": "xy_t",
            "name": "x_max",
            "desc": "x坐标最大值。"
          },
          {
            "type": "xy_t",
            "name": "y_max",
            "desc": "y坐标最大值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置拖动的范围。",
        "name": "dragger_set_range",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      }
    ],
    "properties": [
      {
        "name": "x_min",
        "desc": "x坐标的最小值。",
        "type": "xy_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "y_min",
        "desc": "y坐标的最小值。",
        "type": "xy_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "x_max",
        "desc": "x坐标的最大值。",
        "type": "xy_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "y_max",
        "desc": "y坐标的最大值。",
        "type": "xy_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/dragger.h",
    "desc": "dragger控件。",
    "name": "dragger_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建edit对象",
        "name": "edit_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "edit对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为edit对象(供脚本语言使用)。",
        "name": "edit_cast",
        "return": {
          "type": "widget_t*",
          "desc": "edit对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取int类型的值。",
        "name": "edit_get_int",
        "return": {
          "type": "int32_t",
          "desc": "返回int的值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取double类型的值。",
        "name": "edit_get_double",
        "return": {
          "type": "double",
          "desc": "返回double的值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置int类型的值。",
        "name": "edit_set_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "double",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置double类型的值。",
        "name": "edit_set_double",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "uint32_t",
            "name": "min",
            "desc": "最小长度。"
          },
          {
            "type": "uint32_t",
            "name": "max",
            "desc": "最大长度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置为文本输入及其长度限制，不允许输入超过max个字符，少于min个字符时进入error状态。",
        "name": "edit_set_text_limit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "int32_t",
            "name": "min",
            "desc": "最小值。"
          },
          {
            "type": "int32_t",
            "name": "max",
            "desc": "最大值。"
          },
          {
            "type": "int32_t",
            "name": "step",
            "desc": "步长。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置为整数输入及取值范围。",
        "name": "edit_set_int_limit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "double",
            "name": "min",
            "desc": "最小值。"
          },
          {
            "type": "double",
            "name": "max",
            "desc": "最大值。"
          },
          {
            "type": "double",
            "name": "step",
            "desc": "步长。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置为浮点数输入及取值范围。",
        "name": "edit_set_float_limit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "readonly",
            "desc": "只读。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置编辑器是否为只读。",
        "name": "edit_set_readonly",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "auto_fix",
            "desc": "自动改正。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置编辑器是否为自动改正。",
        "name": "edit_set_auto_fix",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "input_type_t",
            "name": "type",
            "desc": "输入类型。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置编辑器的输入类型。",
        "name": "edit_set_input_type",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "char*",
            "name": "tips",
            "desc": "输入提示。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置编辑器的输入提示。",
        "name": "edit_set_input_tips",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "password_visible",
            "desc": "密码是否可见。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "当编辑器输入类型为密码时，设置密码是否可见。",
        "name": "edit_set_password_visible",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "readonly",
        "desc": "编辑器是否为只读。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "password_visible",
        "desc": "密码是否可见。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "auto_fix",
        "desc": "输入无效时，是否自动改正。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "top_margin",
        "desc": "上边距。",
        "type": "uint8_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "bottom_margin",
        "desc": "下边距。",
        "type": "uint8_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "left_margin",
        "desc": "左边距。",
        "type": "uint8_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "right_margin",
        "desc": "右边距。",
        "type": "uint8_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "tips",
        "desc": "输入提示。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "input_type",
        "desc": "输入类型。XXX：需要在min/max/step之前设置。",
        "type": "input_type_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "persitent": true,
          "design": true
        }
      },
      {
        "name": "min",
        "desc": "最小值或最小长度。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "persitent": true,
          "design": true
        }
      },
      {
        "name": "max",
        "desc": "最大值或最大长度。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "persitent": true,
          "design": true
        }
      },
      {
        "name": "step",
        "desc": "步长。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "persitent": true,
          "design": true
        }
      }
    ],
    "header": "base/edit.h",
    "desc": "文本控件。",
    "name": "edit_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "创建emitter对象。",
        "name": "emitter_create",
        "return": {
          "type": "emitter_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始化emitter对象。",
        "name": "emitter_init",
        "return": {
          "type": "emitter_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "event_t*",
            "name": "e",
            "desc": "事件对象。"
          }
        ],
        "annotation": {},
        "desc": "分发事件。如果当前分发的回调函数返回RET_REMOVE，该回调函数将被移出。禁用状态下，本函数不做任何事情。如果当前分发的回调函数返回RET_STOP，dispatch中断分发，并返回RET_STOP，否则返回RET_OK。",
        "name": "emitter_dispatch",
        "return": {
          "type": "ret_t",
          "desc": ""
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "event_type_t",
            "name": "type",
            "desc": "事件类型。"
          },
          {
            "type": "event_func_t",
            "name": "on_event",
            "desc": "事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {},
        "desc": "注册指定事件的处理函数。",
        "name": "emitter_on",
        "return": {
          "type": "uint32_t",
          "desc": "返回id，用于emitter_off。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "uint32_t",
            "name": "id",
            "desc": "emitter_on返回的ID。"
          }
        ],
        "annotation": {},
        "desc": "注销指定事件的处理函数。",
        "name": "emitter_off",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "event_type_t",
            "name": "type",
            "desc": "事件类型。"
          },
          {
            "type": "event_func_t",
            "name": "on_event",
            "desc": "事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {},
        "desc": "注销指定事件的处理函数。",
        "name": "emitter_off_by_func",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "uint32_t",
            "name": "id",
            "desc": "emitter_on返回的ID。"
          },
          {
            "type": "tk_destroy_t",
            "name": "on_destroy",
            "desc": "回调函数。"
          },
          {
            "type": "void*",
            "name": "on_destroy_ctx",
            "desc": "回调函数上下文。"
          }
        ],
        "annotation": {},
        "desc": "设置一个回调函数，在emitter被销毁时调用(方便脚本语言去释放回调函数)。",
        "name": "emitter_set_on_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "uint32_t",
            "name": "id",
            "desc": "emitter_on返回的ID。"
          }
        ],
        "annotation": {},
        "desc": "通过ID查找emitter_item_t，主要用于辅助测试。",
        "name": "emitter_find",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {},
        "desc": "启用。",
        "name": "emitter_enable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {},
        "desc": "禁用。禁用后emitter_dispatch无效，但可以注册和注销。",
        "name": "emitter_disable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {},
        "desc": "获取注册的回调函数个数，主要用于辅助测试。",
        "name": "emitter_size",
        "return": {
          "type": "uint32_t",
          "desc": "回调函数个数。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {},
        "desc": "析构。",
        "name": "emitter_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁。",
        "name": "emitter_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "items",
        "desc": "注册的回调函数集合。",
        "type": "emitter_item_t*",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "next_id",
        "desc": "下一次emitter_on返回的ID，emitter_on成功后会自动增加next_id。",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "enable",
        "desc": "禁用标志。禁用时dispatch无效。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "remove_curr_iter",
        "desc": "如果在回调函数中，emitter_off当前正在dispatch的回调函数，我们只是设置remove_curr_iter为TRUE，在分发完成后才执行。XXX: 如果要注销当前正在dispatch的回调函数，直接返回RET_REMOVE是最好的选择。",
        "type": "bool_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "curr_iter",
        "desc": "当前正在dispatch的项。",
        "type": "emitter_item_t*",
        "annotation": {
          "private": true
        }
      }
    ],
    "header": "base/emitter.h",
    "desc": "事件分发器, 用于实现观察者模式。",
    "name": "emitter_t"
  },
  {
    "type": "enum",
    "desc": "类型常量定义。",
    "consts": [
      {
        "desc": "无效事件名称。",
        "name": "EVT_NONE"
      },
      {
        "desc": "指针按下事件名(pointer_event_t)。",
        "name": "EVT_POINTER_DOWN"
      },
      {
        "desc": "取消前一个指针按下事件名(pointer_event_t)。",
        "name": "EVT_POINTER_DOWN_ABORT"
      },
      {
        "desc": "指针移动事件名(pointer_event_t)。",
        "name": "EVT_POINTER_MOVE"
      },
      {
        "desc": "指针抬起事件名(pointer_event_t)。",
        "name": "EVT_POINTER_UP"
      },
      {
        "desc": "滚轮事件名(pointer_event_t)。",
        "name": "EVT_WHEEL"
      },
      {
        "desc": "右键/长按弹出上下文菜单的事件名(pointer_event_t)。",
        "name": "EVT_CONTEXT_MENU"
      },
      {
        "desc": "指针进入事件名(pointer_event_t)。",
        "name": "EVT_POINTER_ENTER"
      },
      {
        "desc": "指针离开事件名(pointer_event_t)。",
        "name": "EVT_POINTER_LEAVE"
      },
      {
        "desc": "长按事件名(pointer_event_t)。",
        "name": "EVT_LONG_PRESS"
      },
      {
        "desc": "点击事件名(pointer_event_t)。",
        "name": "EVT_CLICK"
      },
      {
        "desc": "得到焦点事件名(event_t)。",
        "name": "EVT_FOCUS"
      },
      {
        "desc": "失去焦点事件名(event_t)。",
        "name": "EVT_BLUR"
      },
      {
        "desc": "键按下事件名(key_event_t)。",
        "name": "EVT_KEY_DOWN"
      },
      {
        "desc": "按键repeat事件名(key_event_t)。",
        "name": "EVT_KEY_REPEAT"
      },
      {
        "desc": "键抬起事件名(key_event_t)。",
        "name": "EVT_KEY_UP"
      },
      {
        "desc": "对象销毁事件名(event_t)。",
        "name": "EVT_DESTROY"
      },
      {
        "desc": "即将移动Widget的事件名(event_t)。",
        "name": "EVT_WILL_MOVE"
      },
      {
        "desc": "移动Widget的事件名(event_t)。",
        "name": "EVT_MOVE"
      },
      {
        "desc": "即将调整Widget大小的事件名(event_t)。",
        "name": "EVT_WILL_RESIZE"
      },
      {
        "desc": "调整Widget大小的事件名(event_t)。",
        "name": "EVT_RESIZE"
      },
      {
        "desc": "即将调整Widget大小/位置的事件名(event_t)。",
        "name": "EVT_WILL_MOVE_RESIZE"
      },
      {
        "desc": "调整Widget大小/位置的事件名(event_t)。",
        "name": "EVT_MOVE_RESIZE"
      },
      {
        "desc": "对象的属性即将改变的事件名(prop_change_event_t)。",
        "name": "EVT_PROP_WILL_CHANGE"
      },
      {
        "desc": "对象的属性改变的事件名(prop_change_event_t)。",
        "name": "EVT_PROP_CHANGED"
      },
      {
        "desc": "控件的值即将改变的事件名(event_t)。",
        "name": "EVT_VALUE_WILL_CHANGE"
      },
      {
        "desc": "控件的值改变的事件名(event_t)。",
        "name": "EVT_VALUE_CHANGED"
      },
      {
        "desc": "控件的值持续改变(如编辑器正在编辑)的事件名(event_t)。",
        "name": "EVT_VALUE_CHANGING"
      },
      {
        "desc": "绘制的事件名(paint_event_t)。",
        "name": "EVT_PAINT"
      },
      {
        "desc": "即将绘制的事件名(paint_event_t)。",
        "name": "EVT_BEFORE_PAINT"
      },
      {
        "desc": "绘制完成的事件名(paint_event_t)。",
        "name": "EVT_AFTER_PAINT"
      },
      {
        "desc": "locale改变的事件(event_t)。",
        "name": "EVT_LOCALE_CHANGED"
      },
      {
        "desc": "控件动画开始事件(event_t)。",
        "name": "EVT_ANIM_START"
      },
      {
        "desc": "控件动画被主动停止的事件(event_t)。",
        "name": "EVT_ANIM_STOP"
      },
      {
        "desc": "控件动画yoyo/repeat时，完成一次的事件(event_t)。",
        "name": "EVT_ANIM_ONCE"
      },
      {
        "desc": "控件动画完成事件(event_t)。",
        "name": "EVT_ANIM_END"
      },
      {
        "desc": "窗口加载完成事件(event_t)。",
        "name": "EVT_WINDOW_LOAD"
      },
      {
        "desc": "窗口即将打开事件(event_t)。如果有窗口动画，在窗口动画开始前触发。如果没有窗口动画，在窗口被加载后的下一次循环中触发。",
        "name": "EVT_WINDOW_WILL_OPEN"
      },
      {
        "desc": "窗口打开事件(event_t)。如果有窗口动画，在窗口动画完成时触发。如果没有窗口动画，在窗口被加载后的下一次循环中触发。",
        "name": "EVT_WINDOW_OPEN"
      },
      {
        "desc": "窗口关闭事件。",
        "name": "EVT_WINDOW_CLOSE"
      },
      {
        "desc": "输入法提交输入的文本事件(im_commit_event_t)。",
        "name": "EVT_IM_COMMIT"
      },
      {
        "desc": "输入法请求显示候选字事件(im_candidates_event_t)。",
        "name": "EVT_IM_SHOW_CANDIDATES"
      },
      {
        "desc": "软键盘Action点击事件(event_t)。",
        "name": "EVT_IM_ACTION"
      },
      {
        "desc": "请求更新软键盘上的Action按钮的信息(im_action_button_info_event_t)。",
        "name": "EVT_IM_ACTION_INFO"
      },
      {
        "desc": "开始拖动(event_t)。",
        "name": "EVT_DRAG_START"
      },
      {
        "desc": "拖动(event_t)。",
        "name": "EVT_DRAG"
      },
      {
        "desc": "结束拖动(event_t)。",
        "name": "EVT_DRAG_END"
      },
      {
        "desc": "event queue其它请求编号起始值。",
        "name": "EVT_REQ_START"
      },
      {
        "desc": "用户定义事件起始值。",
        "name": "EVT_USER_START"
      }
    ],
    "header": "base/events.h",
    "name": "event_type_t",
    "prefix": "EVT_",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转wheel_event_t对象，主要给脚本语言使用。",
        "name": "event_cast",
        "return": {
          "type": "event_t*",
          "desc": "对象。"
        }
      }
    ],
    "properties": [
      {
        "name": "type",
        "desc": "类型。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "time",
        "desc": "事件发生的时间。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "target",
        "desc": "事件发生的目标对象。",
        "type": "void*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/events.h",
    "desc": "事件基类。",
    "name": "event_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转wheel_event_t对象，主要给脚本语言使用。",
        "name": "wheel_event_cast",
        "return": {
          "type": "wheel_event_t*",
          "desc": "对象。"
        }
      }
    ],
    "properties": [
      {
        "name": "dx",
        "desc": "滚轮的x值。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "dy",
        "desc": "滚轮的x值。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "alt",
        "desc": "alt键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "ctrl",
        "desc": "ctrl键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "shift",
        "desc": "shift键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/events.h",
    "desc": "滚轮事件。",
    "name": "wheel_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转prop_change_event_t对象，主要给脚本语言使用。",
        "name": "prop_change_event_cast",
        "return": {
          "type": "prop_change_event_t*",
          "desc": "对象。"
        }
      }
    ],
    "properties": [
      {
        "name": "name",
        "desc": "属性的名称。",
        "type": "char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "value",
        "desc": "属性的值。",
        "type": "value_t*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/events.h",
    "desc": "对象属性变化事件。",
    "name": "prop_change_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转pointer_event_t对象，主要给脚本语言使用。",
        "name": "pointer_event_cast",
        "return": {
          "type": "pointer_event_t*",
          "desc": "对象。"
        }
      }
    ],
    "properties": [
      {
        "name": "x",
        "desc": "x坐标。",
        "type": "xy_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "y",
        "desc": "y坐标。",
        "type": "xy_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "button",
        "desc": "button。",
        "type": "uint8_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "pressed",
        "desc": "指针是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "alt",
        "desc": "alt键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "ctrl",
        "desc": "ctrl键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "shift",
        "desc": "shift键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/events.h",
    "desc": "指针事件。",
    "name": "pointer_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转key_event_t对象，主要给脚本语言使用。",
        "name": "key_event_cast",
        "return": {
          "type": "key_event_t*",
          "desc": "对象。"
        }
      }
    ],
    "properties": [
      {
        "name": "key",
        "desc": "键值。",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "alt",
        "desc": "alt键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "ctrl",
        "desc": "ctrl键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "shift",
        "desc": "shift键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "caplock",
        "desc": "caplock键是否按下。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/events.h",
    "desc": "按键事件。",
    "name": "key_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转paint_event_t对象。主要给脚本语言使用。",
        "name": "paint_event_cast",
        "return": {
          "type": "paint_event_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "type",
            "desc": "事件类型。"
          },
          {
            "type": "void*",
            "name": "target",
            "desc": "目标对象。"
          }
        ],
        "annotation": {},
        "desc": "初始化事件。",
        "name": "event_init",
        "return": {
          "type": "event_t",
          "desc": "事件对象。"
        }
      },
      {
        "params": [
          {
            "type": "pointer_event_t*",
            "name": "evt",
            "desc": "指针事件对象。"
          },
          {
            "type": "system_info_t*",
            "name": "info",
            "desc": "系统信息。"
          }
        ],
        "annotation": {},
        "desc": "根据屏幕旋转方向修正pointer_event中的坐标。",
        "name": "pointer_event_rotate",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "c",
        "desc": "canvas。",
        "type": "canvas_t*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/events.h",
    "desc": "绘制事件。",
    "name": "paint_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "font_loader_t*",
            "name": "loader",
            "desc": "loader对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "字体名字。"
          },
          {
            "type": "uint8_t*",
            "name": "buff",
            "desc": "字体数据。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "字体数据长度。"
          }
        ],
        "annotation": {},
        "desc": "加载字体。",
        "name": "font_loader_load",
        "return": {
          "type": "font_t*",
          "desc": "成功返回font，失败返回NULL。"
        }
      }
    ],
    "properties": [],
    "header": "base/font_loader.h",
    "desc": "字体加载接口。",
    "name": "font_loader_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "获取缺省的字体管理器。",
        "name": "font_manager",
        "return": {
          "type": "font_manager_t*",
          "desc": "返回字体管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "font_manager_t*",
            "name": "fm",
            "desc": "字体管理器对象。"
          }
        ],
        "annotation": {},
        "desc": "设置缺省的字体管理器。",
        "name": "font_manager_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "font_loader_t*",
            "name": "loader",
            "desc": "字体加载器。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建字体管理器。",
        "name": "font_manager_create",
        "return": {
          "type": "font_manager_t*",
          "desc": "返回字体管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "font_manager_t*",
            "name": "fm",
            "desc": "字体管理器对象。"
          },
          {
            "type": "font_loader_t*",
            "name": "loader",
            "desc": "字体加载器。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始化字体管理器。",
        "name": "font_manager_init",
        "return": {
          "type": "font_manager_t*",
          "desc": "返回字体管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "font_manager_t*",
            "name": "fm",
            "desc": "字体管理器对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "字体名。"
          },
          {
            "type": "font_t*",
            "name": "font",
            "desc": "字体。"
          }
        ],
        "annotation": {},
        "desc": "向缓存中加入字体。",
        "name": "font_manager_add",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "font_manager_t*",
            "name": "fm",
            "desc": "字体管理器对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "字体名，为NULL时使用TK_DEFAULT_FONT。"
          },
          {
            "type": "uint16_t",
            "name": "size",
            "desc": "字体的大小。"
          }
        ],
        "annotation": {},
        "desc": "从缓存中查找字体。",
        "name": "font_manager_find",
        "return": {
          "type": "font_t*",
          "desc": "返回字体对象。"
        }
      },
      {
        "params": [
          {
            "type": "font_manager_t*",
            "name": "fm",
            "desc": "字体管理器对象。"
          }
        ],
        "annotation": {},
        "desc": "析构字体管理器。",
        "name": "font_manager_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "font_manager_t*",
            "name": "fm",
            "desc": "字体管理器对象。"
          }
        ],
        "annotation": {},
        "desc": "析构并释放字体管理器。",
        "name": "font_manager_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [],
    "header": "base/font_manager.h",
    "desc": "字体管理器。(如果使用nanovg，字体由nanovg内部管理)",
    "name": "font_manager_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "func_call_parser_t*",
            "name": "parser",
            "desc": "parser对象。"
          },
          {
            "type": "char*",
            "name": "str",
            "desc": "要解析的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "字符串长度。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始化parser对象。",
        "name": "func_call_parser_init",
        "return": {
          "type": "func_call_parser_t*",
          "desc": "parser对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "func_call_parser_t*",
            "name": "parser",
            "desc": "parser对象。"
          }
        ],
        "annotation": {},
        "desc": "开始解析。",
        "name": "func_call_parser_parse",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "func_call_parser_t*",
            "name": "parser",
            "desc": "parser对象。"
          }
        ],
        "annotation": {},
        "desc": "重置parser。",
        "name": "func_call_parser_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "bitmap_t*",
            "name": "fb",
            "desc": "framebuffer对象。"
          },
          {
            "type": "rect_t*",
            "name": "dst",
            "desc": "要填充的目标区域。"
          },
          {
            "type": "color_t",
            "name": "c",
            "desc": "颜色。"
          }
        ],
        "annotation": {},
        "desc": "用颜色填充指定的区域。",
        "name": "g2d_fill_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败，返回失败则上层用软件实现。"
        }
      },
      {
        "params": [
          {
            "type": "bitmap_t*",
            "name": "fb",
            "desc": "framebuffer对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "图片对象。"
          },
          {
            "type": "rect_t*",
            "name": "src",
            "desc": "要拷贝的区域。"
          },
          {
            "type": "xy_t",
            "name": "dx",
            "desc": "目标位置的x坐标。"
          },
          {
            "type": "xy_t",
            "name": "dy",
            "desc": "目标位置的y坐标。"
          }
        ],
        "annotation": {},
        "desc": "把图片指定的区域拷贝到framebuffer中。",
        "name": "g2d_copy_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败，返回失败则上层用软件实现。"
        }
      },
      {
        "params": [
          {
            "type": "bitmap_t*",
            "name": "fb",
            "desc": "framebuffer对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "图片对象。"
          },
          {
            "type": "rect_t*",
            "name": "src",
            "desc": "要旋转并拷贝的区域。"
          },
          {
            "type": "lcd_orientation_t",
            "name": "o",
            "desc": "旋转角度(一般支持90度即可)。"
          }
        ],
        "annotation": {},
        "desc": "把图片指定的区域进行旋转并拷贝到framebuffer相应的区域，本函数主要用于辅助实现横屏和竖屏的切换，一般支持90度旋转即可。",
        "name": "g2d_copy_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败，返回失败则上层用软件实现。"
        }
      },
      {
        "params": [
          {
            "type": "bitmap_t*",
            "name": "fb",
            "desc": "framebuffer对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "图片对象。"
          },
          {
            "type": "rect_t*",
            "name": "dst",
            "desc": "目的区域。"
          },
          {
            "type": "rect_t*",
            "name": "src",
            "desc": "源区域。"
          },
          {
            "type": "uint8_t",
            "name": "global_alpha",
            "desc": "全局alpha。"
          }
        ],
        "annotation": {},
        "desc": "把图片指定的区域渲染到framebuffer指定的区域，src的大小和dst的大小不一致则进行缩放。1.硬件不支持缩放，则返回NOT_IMPL。2.硬件不支持全局alpha，global_alpha!=0xff时返回NOT_IMPL。",
        "name": "g2d_blend_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败，返回失败则上层用软件实现。"
        }
      }
    ],
    "properties": [],
    "header": "base/func_call_parser.h",
    "desc": "从字符串中解析出函数调用需要的参数。func_call => func_name '(' params ')'params => param ',' paramsparam => name '=' valuefunc_name => IDname = IDvalue = int | float | ID如:move(x=10, y=20)如:rename(old_name=aa, new_name=bb)",
    "name": "func_call_parser_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建grid对象",
        "name": "grid_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "grid对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为grid对象(供脚本语言使用)。",
        "name": "grid_cast",
        "return": {
          "type": "widget_t*",
          "desc": "grid对象。"
        }
      }
    ],
    "properties": [],
    "header": "base/grid.h",
    "desc": "grid。一个简单的容器控件，用于网格排列一组控件。它本身不提供布局功能(可用layout参数指定)，和view功能一致，仅提供具有语义的标签，让xml更具有可读性。",
    "name": "grid_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建group_box对象",
        "name": "group_box_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "group_box对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为group_box对象(供脚本语言使用)。",
        "name": "group_box_cast",
        "return": {
          "type": "widget_t*",
          "desc": "group_box对象。"
        }
      }
    ],
    "properties": [],
    "header": "base/group_box.h",
    "desc": "分组控件。",
    "name": "group_box_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "idle_func_t",
            "name": "on_idle",
            "desc": "idle回调函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "idle回调函数的上下文。"
          }
        ],
        "annotation": {
          "scriptable": "custom",
          "static": true
        },
        "desc": "增加一个idle。",
        "name": "idle_add",
        "return": {
          "type": "uint32_t",
          "desc": "返回idle的ID，0表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "idle_func_t",
            "name": "on_idle",
            "desc": "idle回调函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "idle回调函数的上下文。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "用于非GUI线程增加一个idle，本函数向主循环的事件队列中发送一个增加idle的请求。",
        "name": "idle_queue",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "idle_id",
            "desc": "idleID。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "删除指定的idle。",
        "name": "idle_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "private": true
        },
        "desc": "查找指定ID的idle。",
        "name": "idle_find",
        "return": {
          "type": "idle_info_t*",
          "desc": "返回idle的信息。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "idle_id",
            "desc": "idleID。"
          },
          {
            "type": "tk_destroy_t",
            "name": "on_destroy",
            "desc": "回调函数。"
          },
          {
            "type": "void*",
            "name": "on_destroy_ctx",
            "desc": "回调函数上下文。"
          }
        ],
        "annotation": {},
        "desc": "设置一个回调函数，在idle被销毁时调用(方便脚本语言去释放回调函数)。",
        "name": "idle_set_on_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "private": true
        },
        "desc": "调用全部idle的函数。",
        "name": "idle_dispatch",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true
        },
        "desc": "返回idle的个数。",
        "name": "idle_count",
        "return": {
          "type": "uint32_t",
          "desc": "返回idle的个数。"
        }
      }
    ],
    "properties": [],
    "header": "base/idle.h",
    "desc": "idle函数在paint之后执行。",
    "name": "idle_t",
    "annotation": {
      "scriptable": true,
      "fake": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "image_loader_t*",
            "name": "loader",
            "desc": "loader对象。"
          },
          {
            "type": "uint8_t*",
            "name": "buff",
            "desc": "图片数据。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "图片数据长度。"
          },
          {
            "type": "bitmap_t*",
            "name": "bitmap",
            "desc": "用于返回位图对象。"
          }
        ],
        "annotation": {},
        "desc": "加载图片。",
        "name": "image_loader_load",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [],
    "header": "base/image_loader.h",
    "desc": "图片加载接口。",
    "name": "image_loader_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "获取缺省的图片管理器。",
        "name": "image_manager",
        "alias": "image_manager_instance",
        "return": {
          "type": "image_manager_t*",
          "desc": "返回图片管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "image_manager_t*",
            "name": "imm",
            "desc": "图片管理器对象。"
          }
        ],
        "annotation": {},
        "desc": "设置缺省的图片管理器。",
        "name": "image_manager_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "image_loader_t*",
            "name": "loader",
            "desc": "图片加载器。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建图片管理器。",
        "name": "image_manager_create",
        "return": {
          "type": "image_manager_t*",
          "desc": "返回图片管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "image_manager_t*",
            "name": "imm",
            "desc": "图片管理器对象。"
          },
          {
            "type": "image_loader_t*",
            "name": "loader",
            "desc": "图片加载器。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始化图片管理器。",
        "name": "image_manager_init",
        "return": {
          "type": "image_manager_t*",
          "desc": "返回图片管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "image_manager_t*",
            "name": "imm",
            "desc": "图片管理器对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "图片名称。"
          },
          {
            "type": "bitmap_t*",
            "name": "image",
            "desc": "用于返回图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "加载指定的图片。",
        "name": "image_manager_load",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "image_manager_t*",
            "name": "imm",
            "desc": "图片管理器对象。"
          },
          {
            "type": "uint32_t",
            "name": "time_delta_s",
            "desc": "时间范围，单位为秒。"
          }
        ],
        "annotation": {},
        "desc": "从图片管理器中卸载指定时间内没有使用的图片。",
        "name": "image_manager_unload_unused",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "image_manager_t*",
            "name": "imm",
            "desc": "图片管理器对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "图片名。"
          },
          {
            "type": "bitmap_t*",
            "name": "image",
            "desc": "图片信息。"
          }
        ],
        "annotation": {},
        "desc": "向缓存中加入一张图片",
        "name": "image_manager_add",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "image_manager_t*",
            "name": "imm",
            "desc": "图片管理器对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "图片名。"
          },
          {
            "type": "bitmap_t*",
            "name": "image",
            "desc": "返回图片信息。"
          }
        ],
        "annotation": {},
        "desc": "从缓存中查找图片",
        "name": "image_manager_lookup",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "image_manager_t*",
            "name": "imm",
            "desc": "图片管理器对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "image",
            "desc": "返回图片信息。"
          }
        ],
        "annotation": {},
        "desc": "更新缓存中图片的specific信息。",
        "name": "image_manager_update_specific",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "image_manager_t*",
            "name": "imm",
            "desc": "图片管理器对象。"
          }
        ],
        "annotation": {},
        "desc": "析构图片管理器。",
        "name": "image_manager_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "image_manager_t*",
            "name": "imm",
            "desc": "图片管理器对象。"
          }
        ],
        "annotation": {},
        "desc": "析构并释放图片管理器。",
        "name": "image_manager_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "images",
        "desc": "缓存的图片。",
        "type": "array_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "loader",
        "desc": "图片加载器。",
        "type": "image_loader_t*",
        "annotation": {
          "private": true
        }
      }
    ],
    "header": "base/image_manager.h",
    "desc": "图片管理器。负责加载，解码和缓存图片。",
    "name": "image_manager_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建image对象",
        "name": "image_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "图片名称，该图片必须存在于资源管理器。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的图片名称。",
        "name": "image_set_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image对象。"
          },
          {
            "type": "image_draw_type_t",
            "name": "draw_type",
            "desc": "显示方式(仅在没有旋转和缩放时生效)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置图片的显示方式。",
        "name": "image_set_draw_type",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "float_t",
            "name": "rotation",
            "desc": "旋转角度(幅度)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的旋转角度(仅在WITH_VGCANVAS定义时生效)。",
        "name": "image_set_rotation",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "float_t",
            "name": "scale_x",
            "desc": "X方向缩放比例。"
          },
          {
            "type": "float_t",
            "name": "scale_y",
            "desc": "Y方向缩放比例。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的缩放比例(仅在WITH_VGCANVAS定义时生效)。",
        "name": "image_set_scale",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "float_t",
            "name": "anchor_x",
            "desc": "锚点X(0-1)。0在控件左边，0.5在控件中间，1在控件右边。"
          },
          {
            "type": "float_t",
            "name": "anchor_y",
            "desc": "锚点Y(0-1)。0在控件顶部，0.5在控件中间，1在控件底部。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的锚点(仅在WITH_VGCANVAS定义时生效)。",
        "name": "image_set_anchor",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "selected",
            "desc": "是否被选中。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的选中状态。",
        "name": "image_set_selected",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "selectable",
            "desc": "是否可以被选中。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件是否可以被选中。",
        "name": "image_set_selectable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "clickable",
            "desc": "是否可以被点击。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件是否可以被点击。",
        "name": "image_set_clickable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "anchor_x",
        "desc": "锚点X(0-1)。0在控件左边，0.5在控件中间，1在控件右边。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "anchor_y",
        "desc": "锚点Y(0-1)。0在控件顶部，0.5在控件中间，1在控件底部。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "scale_x",
        "desc": "控件在X方向上的缩放比例。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "scale_y",
        "desc": "控件在Y方向上的缩放比例。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "rotation",
        "desc": "控件的旋转角度。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "clickable",
        "desc": "点击时，是否触发EVT_CLICK事件。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "selectable",
        "desc": "是否设置选中状态。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "image",
        "desc": "图片的名称。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "draw_type",
        "desc": "图片的绘制方式(仅在没有旋转和缩放时生效)。",
        "type": "image_draw_type_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "selected",
        "desc": "当前是否被选中。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/image.h",
    "desc": "图片控件。",
    "name": "image_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "创建输入法引擎对象。",
        "name": "input_engine_create",
        "return": {
          "type": "input_engine_t*",
          "desc": "返回输入法引擎对象。"
        }
      },
      {
        "params": [
          {
            "type": "input_engine_t*",
            "name": "engine",
            "desc": "输入法引擎对象。"
          }
        ],
        "annotation": {},
        "desc": "@deconstructor销毁输入法引擎对象。",
        "name": "input_engine_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_engine_t*",
            "name": "engine",
            "desc": "输入法引擎对象。"
          }
        ],
        "annotation": {},
        "desc": "清除所有输入的按键组合和候选字。",
        "name": "input_engine_reset_input",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_engine_t*",
            "name": "engine",
            "desc": "输入法引擎对象。"
          },
          {
            "type": "int",
            "name": "key",
            "desc": "键值。"
          }
        ],
        "annotation": {},
        "desc": "输入新的按键，并更新候选字。",
        "name": "input_engine_input",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "keys",
        "desc": "当前的按键组合。",
        "type": "str_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "candidates",
        "desc": "当前按键组合对应的候选字列表。",
        "type": "char*",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "candidates_nr",
        "desc": "当前按键组合对应的候选字/词个数。",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      }
    ],
    "header": "base/input_engine.h",
    "desc": "输入法引擎接口。",
    "name": "input_engine_t"
  },
  {
    "type": "enum",
    "desc": "输入类型常量定义。",
    "consts": [
      {
        "desc": "文本。",
        "name": "INPUT_TEXT"
      },
      {
        "desc": "整数。",
        "name": "INPUT_INT"
      },
      {
        "desc": "非负整数。",
        "name": "INPUT_UINT"
      },
      {
        "desc": "16进制整数。",
        "name": "INPUT_HEX"
      },
      {
        "desc": "浮点数。",
        "name": "INPUT_FLOAT"
      },
      {
        "desc": "非负浮点数。",
        "name": "INPUT_UFLOAT"
      },
      {
        "desc": "邮件地址。",
        "name": "INPUT_EMAIL"
      },
      {
        "desc": "密码。",
        "name": "INPUT_PASSWORD"
      },
      {
        "desc": "电话号码。",
        "name": "INPUT_PHONE"
      }
    ],
    "header": "base/input_method.h",
    "name": "input_type_t",
    "prefix": "INPUT_",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [],
    "properties": [
      {
        "name": "widget",
        "desc": "当前的焦点控件。",
        "type": "widget_t*",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "keyboard",
        "desc": "当前的软件键盘。",
        "type": "widget_t*",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "win",
        "desc": "当前的窗口。",
        "type": "widget_t*",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "win_delta_y",
        "desc": "由于软键盘的弹出，可能会将窗口向上推移，win_delta_y为推移的距离。",
        "type": "int32_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "action_button_enable",
        "desc": "软键盘的上的action按钮是否可用。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "action_button_enable",
        "desc": "软键盘的上的action按钮文本。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "emitter",
        "desc": "emitter。用于实现dispatch/on/off等功能。",
        "type": "emitter_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "input_type",
        "desc": "当前输入的类型。",
        "type": "input_type_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/input_method.h",
    "desc": "输入法接口。",
    "name": "input_method_t"
  },
  {
    "type": "class",
    "methods": [],
    "properties": [
      {
        "name": "text",
        "desc": "提交的文本。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/input_method.h",
    "desc": "输入法提交输入的文本事件。",
    "name": "im_commit_event_t",
    "parent": "event_t"
  },
  {
    "type": "class",
    "methods": [],
    "properties": [
      {
        "name": "text",
        "desc": "软键盘上的action按钮显示的文本。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "enable",
        "desc": "软键盘上的action按钮启用。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/input_method.h",
    "desc": "设置软键盘上的action按钮的信息事件。",
    "name": "im_action_button_info_event_t",
    "parent": "event_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "控件对象。"
          },
          {
            "type": "event_t*",
            "name": "e",
            "desc": "事件。"
          }
        ],
        "annotation": {},
        "desc": "分发一个事件。",
        "name": "input_method_dispatch",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "控件对象。"
          },
          {
            "type": "event_t*",
            "name": "e",
            "desc": "事件。"
          }
        ],
        "annotation": {},
        "desc": "分发一个事件当前焦点控件。",
        "name": "input_method_dispatch_to_widget",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          },
          {
            "type": "event_type_t",
            "name": "type",
            "desc": "事件类型。"
          },
          {
            "type": "event_func_t",
            "name": "on_event",
            "desc": "事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {},
        "desc": "注册指定事件的处理函数。",
        "name": "input_method_on",
        "return": {
          "type": "uint32_t",
          "desc": "返回id，用于input_method_off。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          },
          {
            "type": "uint32_t",
            "name": "id",
            "desc": "input_method_on返回的ID。"
          }
        ],
        "annotation": {},
        "desc": "注销指定事件的处理函数。",
        "name": "input_method_off",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          },
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "焦点控件，为NULL时关闭输入法，非NULL时打开输入法。"
          }
        ],
        "annotation": {},
        "desc": "打开或关闭输入法。",
        "name": "input_method_request",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "按钮的文本。"
          },
          {
            "type": "bool_t",
            "name": "enable",
            "desc": "按钮的是否可用。"
          }
        ],
        "annotation": {},
        "desc": "设置软键盘上的action按钮的信息。",
        "name": "input_method_update_action_button_info",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          }
        ],
        "annotation": {},
        "desc": "软键盘上的action按钮被点击时，调用本函数分发EVT_IM_ACTION事件。",
        "name": "input_method_dispatch_action",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {},
        "desc": "提交输入文本。",
        "name": "input_method_commit_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          },
          {
            "type": "uint32_t",
            "name": "key",
            "desc": "键值。"
          }
        ],
        "annotation": {},
        "desc": "提交按键。",
        "name": "input_method_dispatch_key",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          },
          {
            "type": "char*",
            "name": "strs",
            "desc": "候选字列表。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "候选字个数。"
          }
        ],
        "annotation": {},
        "desc": "请求显示候选字。",
        "name": "input_method_dispatch_candidates",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "创建输入法对象。在具体实现中实现。",
        "name": "input_method_create",
        "return": {
          "type": "input_method_t*",
          "desc": "成功返回输入法对象，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁输入法对象。在具体实现中实现。",
        "name": "input_method_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "获取全局输入法对象。",
        "name": "input_method",
        "return": {
          "type": "input_method_t*",
          "desc": "成功返回输入法对象，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "input_method_t*",
            "name": "im",
            "desc": "输入法对象。"
          }
        ],
        "annotation": {},
        "desc": "设置全局输入法对象。",
        "name": "input_method_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "candidates",
        "desc": "可选的文本，多个文本以\\0分隔。如：里\\0李\\0力\\0离\\0",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "candidates_nr",
        "desc": "可选的文本的个数。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/input_method.h",
    "desc": "输入法请求显示候选字的事件。",
    "name": "im_candidates_event_t",
    "parent": "event_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建label对象",
        "name": "label_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      }
    ],
    "properties": [],
    "header": "base/label.h",
    "desc": "文本控件。",
    "name": "label_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "enum",
    "desc": "LCD绘制模式常量定义。",
    "consts": [
      {
        "desc": "正常绘制。",
        "name": "LCD_DRAW_NORMAL"
      },
      {
        "desc": "绘制窗口动画，两个窗口无重叠。在该模式下，可以直接绘制到显存，不用绘制到framebuffer中。",
        "name": "LCD_DRAW_ANIMATION"
      },
      {
        "desc": "绘制窗口动画，两个窗口有重叠。(目前无特殊用途)。",
        "name": "LCD_DRAW_ANIMATION_OVERLAP"
      },
      {
        "desc": "如果lcd支持swap操作，在特殊情况下，可以使用该模式提速。",
        "name": "LCD_DRAW_SWAP"
      },
      {
        "desc": "离线模式绘制(仅适用于framebuffer)。在该模式下，绘制的内容不会显示出来，但可以用take_snapshot取出来，主要用于窗口动画。",
        "name": "LCD_DRAW_OFFLINE"
      }
    ],
    "header": "base/lcd.h",
    "name": "lcd_draw_mode_t",
    "prefix": "LCD_DRAW_"
  },
  {
    "type": "enum",
    "desc": "LCD类型常量定义。",
    "consts": [
      {
        "desc": "基于FrameBuffer的LCD。",
        "name": "LCD_FRAMEBUFFER"
      },
      {
        "desc": "基于寄存器的LCD。",
        "name": "LCD_REGISTER"
      },
      {
        "desc": "基于VGCANVS的LCD。仅在支持OpenGL时，用nanovg实现。",
        "name": "LCD_VGCANVAS"
      }
    ],
    "header": "base/lcd.h",
    "name": "lcd_type_t",
    "prefix": "LCD_"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "rect_t*",
            "name": "dirty_rect",
            "desc": "需要绘制的区域。"
          },
          {
            "type": "bool_t",
            "name": "anim_mode",
            "desc": "动画模式，如果可能，直接画到显存而不是离线的framebuffer。"
          }
        ],
        "annotation": {},
        "desc": "准备绘制。",
        "name": "lcd_begin_frame",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "rect_t*",
            "name": "rect",
            "desc": "裁剪区域。"
          }
        ],
        "annotation": {},
        "desc": "设置裁剪区域。",
        "name": "lcd_set_clip_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "新的宽度。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "新的高度。"
          }
        ],
        "annotation": {},
        "desc": "基于SDL的PC软件，在SDL窗口resize时，需要调用本函数resize lcd。",
        "name": "lcd_resize",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "uint8_t",
            "name": "alpha",
            "desc": "全局alpha。"
          }
        ],
        "annotation": {},
        "desc": "设置全局alpha。",
        "name": "lcd_set_global_alpha",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "color_t",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {},
        "desc": "设置文本颜色。",
        "name": "lcd_set_text_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "color_t",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {},
        "desc": "设置线条颜色。",
        "name": "lcd_set_stroke_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "color_t",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {},
        "desc": "设置填充颜色。",
        "name": "lcd_set_fill_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "字体名称。"
          }
        ],
        "annotation": {},
        "desc": "设置字体名称。",
        "name": "lcd_set_font_name",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "uint32_t",
            "name": "font_size",
            "desc": "字体大小。"
          }
        ],
        "annotation": {},
        "desc": "设置字体大小。",
        "name": "lcd_set_font_size",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "xy_t*",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t*",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "xy_t*",
            "name": "h",
            "desc": "直线高度。"
          }
        ],
        "annotation": {},
        "desc": "绘制一条垂直线。",
        "name": "lcd_draw_vline",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "xy_t*",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t*",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "xy_t*",
            "name": "w",
            "desc": "直线宽度。"
          }
        ],
        "annotation": {},
        "desc": "绘制一条水平线。",
        "name": "lcd_draw_hline",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "point_t*",
            "name": "points",
            "desc": "要绘制的点集合。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "点的个数。"
          }
        ],
        "annotation": {},
        "desc": "绘制一组点。",
        "name": "lcd_draw_points",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {},
        "desc": "获取指定点的颜色，对于基于非FrameBuffer的LCD，返回当前的fill_color。",
        "name": "lcd_get_point_color_t",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {},
        "desc": "绘制实心矩形。",
        "name": "lcd_fill_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {},
        "desc": "绘制矩形。",
        "name": "lcd_stroke_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "glyph_t*",
            "name": "glyph",
            "desc": "字模"
          },
          {
            "type": "rect_t*",
            "name": "src",
            "desc": "只绘制指定区域的部分。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {},
        "desc": "绘制字符。如果实现了measure_text/draw_text则不需要实现本函数。",
        "name": "lcd_draw_glyph",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "wchar_t*",
            "name": "str",
            "desc": "字符串。"
          },
          {
            "type": "int32_t",
            "name": "nr",
            "desc": "字符数。"
          }
        ],
        "annotation": {},
        "desc": "测量字符串占用的宽度。",
        "name": "lcd_measure_text",
        "return": {
          "type": "float_t",
          "desc": "返回字符串占用的宽度。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "wchar_t*",
            "name": "str",
            "desc": "字符串。"
          },
          {
            "type": "int32_t",
            "name": "nr",
            "desc": "字符数。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {},
        "desc": "绘制字符。",
        "name": "lcd_draw_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "图片。"
          },
          {
            "type": "rect_t*",
            "name": "src",
            "desc": "只绘制指定区域的部分。"
          },
          {
            "type": "rect_t*",
            "name": "dst",
            "desc": "绘制到目标区域。"
          }
        ],
        "annotation": {},
        "desc": "绘制图片。",
        "name": "lcd_draw_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "draw_image_info_t*",
            "name": "info",
            "desc": "绘制参数。"
          }
        ],
        "annotation": {},
        "desc": "绘制图片。",
        "name": "lcd_draw_image_matrix",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          }
        ],
        "annotation": {},
        "desc": "获取矢量图canvas。",
        "name": "lcd_get_vgcanvas",
        "return": {
          "type": "vgcanvas_t*",
          "desc": "返回矢量图canvas。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "返回快照图片。"
          },
          {
            "type": "bool_t",
            "name": "auto_rotate",
            "desc": "是否根据LCD实际方向自动旋转。"
          }
        ],
        "annotation": {},
        "desc": "拍摄快照，一般用于窗口动画，只有framebuffer模式，才支持。",
        "name": "lcd_take_snapshot",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": "对于double fb，如果硬件支持swap，在LCD_DRAW_SWAP模式下，该函数用于切换fb。",
        "name": "lcd_swap",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": "flush。",
        "name": "lcd_flush",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          }
        ],
        "annotation": {},
        "desc": "判读lcd是否支持swap。",
        "name": "lcd_is_swappable",
        "return": {
          "type": "bool_t",
          "desc": "返回是否支持swap。"
        }
      },
      {
        "params": [
          {
            "type": "lcd_t*",
            "name": "lcd",
            "desc": "lcd对象。"
          }
        ],
        "annotation": {},
        "desc": "完成绘制，同步到显示设备。",
        "name": "lcd_end_frame",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "w",
        "desc": "屏幕的宽度",
        "type": "wh_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "height",
        "desc": "屏幕的高度",
        "type": "wh_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "global_alpha",
        "desc": "全局alpha",
        "type": "uint8_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "text_color",
        "desc": "文本颜色",
        "type": "color_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "fill_color",
        "desc": "填充颜色",
        "type": "color_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "stroke_color",
        "desc": "线条颜色",
        "type": "color_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "font_name",
        "desc": "字体名称。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "font_size",
        "desc": "字体大小。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "draw_mode",
        "desc": "绘制模式。",
        "type": "lcd_draw_mode_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "type",
        "desc": "LCD的类型。",
        "type": "lcd_type_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "ratio",
        "desc": "屏幕密度。",
        "type": "float_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "support_dirty_rect",
        "desc": "是否支持脏矩形。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/lcd.h",
    "desc": "显示设备抽象基类。",
    "name": "lcd_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "获取缺省locale_info。",
        "name": "locale_info",
        "alias": "locale_info_instance",
        "return": {
          "type": "locale_info_t*",
          "desc": "返回locale_info对象。"
        }
      },
      {
        "params": [
          {
            "type": "locale_info_t*",
            "name": "locale_info",
            "desc": "locale_info对象。"
          }
        ],
        "annotation": {},
        "desc": "设置缺省locale_info。",
        "name": "locale_info_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "language",
            "desc": "语言。"
          },
          {
            "type": "char*",
            "name": "country",
            "desc": "国家或地区。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建locale_info。",
        "name": "locale_info_create",
        "return": {
          "type": "locale_info_t*",
          "desc": "返回locale_info对象。"
        }
      },
      {
        "params": [
          {
            "type": "locale_info_t*",
            "name": "locale_info",
            "desc": "locale_info对象。"
          },
          {
            "type": "char*",
            "name": "language",
            "desc": "语言。"
          },
          {
            "type": "char*",
            "name": "country",
            "desc": "国家或地区。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始化locale_info。",
        "name": "locale_info_init",
        "return": {
          "type": "locale_info_t*",
          "desc": "返回locale_info对象。"
        }
      },
      {
        "params": [
          {
            "type": "locale_info_t*",
            "name": "locale_info",
            "desc": "locale_info对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "待翻译的文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "翻译字符串。",
        "name": "locale_info_tr",
        "return": {
          "type": "char*",
          "desc": "返回翻译之后的字符串。"
        }
      },
      {
        "params": [
          {
            "type": "locale_info_t*",
            "name": "locale_info",
            "desc": "locale_info对象。"
          },
          {
            "type": "char*",
            "name": "language",
            "desc": "语言。"
          },
          {
            "type": "char*",
            "name": "country",
            "desc": "国家或地区。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置当前的国家和语言。",
        "name": "locale_info_change",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "locale_info_t*",
            "name": "locale_info",
            "desc": "控件对象。"
          },
          {
            "type": "event_type_t",
            "name": "type",
            "desc": "事件类型，目前固定为EVT_LOCALE_CHANGED。"
          },
          {
            "type": "event_func_t",
            "name": "on_event",
            "desc": "事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {
          "scriptable": "custom"
        },
        "desc": "注册指定事件的处理函数。",
        "name": "locale_info_on",
        "return": {
          "type": "uint32_t",
          "desc": "返回id，用于locale_info_off。"
        }
      },
      {
        "params": [
          {
            "type": "locale_info_t*",
            "name": "locale_info",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "id",
            "desc": "locale_info_on返回的ID。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "注销指定事件的处理函数。",
        "name": "locale_info_off",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "locale_info_t*",
            "name": "locale_info",
            "desc": "locale_info对象。"
          }
        ],
        "annotation": {},
        "desc": "释放全部资源。",
        "name": "locale_info_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "locale_info_t*",
            "name": "locale_info",
            "desc": "locale_info对象。"
          }
        ],
        "annotation": {},
        "desc": "释放全部资源并销毁locale_info对象。",
        "name": "locale_info_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "country;",
        "desc": "国家或地区。如：CN",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "language",
        "desc": "语言。如：zh",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/locale_info.h",
    "desc": "locale_info",
    "name": "locale_info_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {},
        "desc": "创建mutex。",
        "name": "tk_mutex_create",
        "return": {
          "type": "tk_mutex_t*",
          "desc": "mutex对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_mutex_t*",
            "name": "mutex",
            "desc": "mutex对象。"
          }
        ],
        "annotation": {},
        "desc": "加锁。",
        "name": "tk_mutex_lock",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_mutex_t*",
            "name": "mutex",
            "desc": "mutex对象。"
          }
        ],
        "annotation": {},
        "desc": "解锁。",
        "name": "tk_mutex_unlock",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_mutex_t*",
            "name": "mutex",
            "desc": "mutex对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁mutex对象。",
        "name": "tk_mutex_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [],
    "header": "base/mutex.h",
    "desc": "互斥锁。",
    "name": "tk_mutex_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建pages对象",
        "name": "pages_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "pages对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为pages对象(供脚本语言使用)。",
        "name": "pages_cast",
        "return": {
          "type": "widget_t*",
          "desc": "pages对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "当前Page的序号。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置当前的Page。",
        "name": "pages_set_active",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "当前Page的名字。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "通过页面的名字设置当前的Page。",
        "name": "pages_set_active_by_name",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "active",
        "desc": "当前活跃的page。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/pages.h",
    "desc": "Pages。只有一个Page处于active状态，处于active状态的Page才能显示并接收事件。",
    "name": "pages_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建popup对象。",
        "name": "popup_create",
        "return": {
          "type": "widget_t*",
          "desc": "popup对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "popup对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为popup对象(供脚本语言使用)。",
        "name": "popup_cast",
        "return": {
          "type": "widget_t*",
          "desc": "popup对象。"
        }
      }
    ],
    "properties": [
      {
        "name": "close_when_click",
        "desc": "点击时是否关闭窗口。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "close_when_click_outside",
        "desc": "点击到窗口外时是否关闭窗口。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/popup.h",
    "desc": "popup窗口。",
    "name": "popup_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建progress_bar对象",
        "name": "progress_bar_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "progress_bar对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为progress_bar对象(供脚本语言使用)。",
        "name": "progress_bar_cast",
        "return": {
          "type": "widget_t*",
          "desc": "progress_bar对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint8_t",
            "name": "value",
            "desc": "进度"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置进度条的进度。",
        "name": "progress_bar_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "vertical",
            "desc": "是否为垂直方向。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置进度条的方向。",
        "name": "progress_bar_set_vertical",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "show_text",
            "desc": "是否显示文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置进度条的是否显示文本。",
        "name": "progress_bar_set_show_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": "进度条的值[0-100]。",
        "type": "uint8_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "vertical",
        "desc": "进度条的是否为垂直方向。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "show_text",
        "desc": "是否显示文本。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/progress_bar.h",
    "desc": "进度条控件。",
    "name": "progress_bar_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [],
    "properties": [
      {
        "name": "x",
        "desc": "x坐标。",
        "type": "xy_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "y",
        "desc": "y坐标。",
        "type": "xy_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/rect.h",
    "desc": "点。包括一个x坐标和一个y坐标。",
    "name": "point_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [],
    "properties": [
      {
        "name": "x",
        "desc": "x坐标。",
        "type": "xy_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "y",
        "desc": "y坐标。",
        "type": "xy_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "w",
        "desc": "宽度。",
        "type": "wh_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "h",
        "desc": "高度。",
        "type": "wh_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/rect.h",
    "desc": "矩形。包括一个x坐标、y坐标、宽度和高度。",
    "name": "rect_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建row对象",
        "name": "row_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "row对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为row对象(供脚本语言使用)。",
        "name": "row_cast",
        "return": {
          "type": "widget_t*",
          "desc": "row对象。"
        }
      }
    ],
    "properties": [],
    "header": "base/row.h",
    "desc": "row。一个简单的容器控件，用于水平排列一组控件。它本身不提供布局功能(可用layout参数指定)，和view功能一致，仅提供具有语义的标签，让xml更具有可读性。",
    "name": "row_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建slider对象",
        "name": "slider_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slider对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为slider对象(供脚本语言使用)。",
        "name": "slider_cast",
        "return": {
          "type": "widget_t*",
          "desc": "slider对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint16_t",
            "name": "value",
            "desc": "值"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置滑块的值。",
        "name": "slider_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint16_t",
            "name": "min",
            "desc": "最小值"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置滑块的最小值。",
        "name": "slider_set_min",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint16_t",
            "name": "max",
            "desc": "最大值"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置滑块的最大值。",
        "name": "slider_set_max",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint16_t",
            "name": "step",
            "desc": "拖动的最小单位。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置滑块的拖动的最小单位。",
        "name": "slider_set_step",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "vertical",
            "desc": "是否为垂直方向。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置滑块的方向。",
        "name": "slider_set_vertical",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": "值。",
        "type": "uint16_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "min",
        "desc": "最小值。",
        "type": "uint16_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "max",
        "desc": "最大值。",
        "type": "uint16_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "step",
        "desc": "拖动的最小单位。",
        "type": "uint16_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "vertical",
        "desc": "滑块的是否为垂直方向。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/slider.h",
    "desc": "滑块控件。",
    "name": "slider_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建spin_box对象",
        "name": "spin_box_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "spin_box对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为spin_box对象(供脚本语言使用)。",
        "name": "spin_box_cast",
        "return": {
          "type": "widget_t*",
          "desc": "spin_box对象。"
        }
      }
    ],
    "properties": [],
    "header": "base/spin_box.h",
    "desc": "spinbox控件。",
    "name": "spin_box_t",
    "parent": "edit_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint32_t",
            "name": "capacity",
            "desc": "初始容量。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始化字符串对象。",
        "name": "str_init",
        "return": {
          "type": "str_t*",
          "desc": "str对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "待比较的字符串。"
          }
        ],
        "annotation": {},
        "desc": "判断两个字符串是否相等。",
        "name": "str_eq",
        "return": {
          "type": "bool_t",
          "desc": "返回是否相等。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要设置的字符串。"
          }
        ],
        "annotation": {},
        "desc": "设置字符串。",
        "name": "str_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要设置的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "字符串长度。"
          }
        ],
        "annotation": {},
        "desc": "设置字符串。",
        "name": "str_set_with_len",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要追加的字符串。"
          }
        ],
        "annotation": {},
        "desc": "追加字符串。",
        "name": "str_append",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要追加的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "字符串长度。"
          }
        ],
        "annotation": {},
        "desc": "追加字符串。",
        "name": "str_append_with_len",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint32_t",
            "name": "offset",
            "desc": "偏移量。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要插入的字符串。"
          }
        ],
        "annotation": {},
        "desc": "插入子字符串。",
        "name": "str_insert",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint32_t",
            "name": "offset",
            "desc": "偏移量。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要插入的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "字符串长度。"
          }
        ],
        "annotation": {},
        "desc": "插入子字符串。",
        "name": "str_insert_with_len",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint32_t",
            "name": "offset",
            "desc": "偏移量。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "长度。"
          }
        ],
        "annotation": {},
        "desc": "删除子字符串。",
        "name": "str_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char",
            "name": "c",
            "desc": "要追加的字符。"
          }
        ],
        "annotation": {},
        "desc": "追加一个字符。",
        "name": "str_append_char",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要解码的XML文本。"
          }
        ],
        "annotation": {},
        "desc": "对XML基本的entity进行解码，目前仅支持&lt;&gt;&quota;&amp;。",
        "name": "str_decode_xml_entity",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要解码的XML文本。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "字符串长度。"
          }
        ],
        "annotation": {},
        "desc": "对XML基本的entity进行解码，目前仅支持&lt;&gt;&quota;&amp;。",
        "name": "str_decode_xml_entity_with_len",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "int32_t",
            "name": "v",
            "desc": "整数。"
          }
        ],
        "annotation": {},
        "desc": "用整数初始化字符串。",
        "name": "str_from_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "float",
            "name": "v",
            "desc": "浮点数。"
          }
        ],
        "annotation": {},
        "desc": "用浮点数初始化字符串。",
        "name": "str_from_float",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "value_t",
            "name": "v",
            "desc": "value。"
          }
        ],
        "annotation": {},
        "desc": "用value初始化字符串。",
        "name": "str_from_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "wchar_t*",
            "name": "wstr",
            "desc": "wstr。"
          }
        ],
        "annotation": {},
        "desc": "用value初始化字符串。",
        "name": "str_from_wstr",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "int32_t*",
            "name": "v",
            "desc": "用于返回整数。"
          }
        ],
        "annotation": {},
        "desc": "将字符串转成整数。",
        "name": "str_to_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "float*",
            "name": "v",
            "desc": "用于返回浮点数。"
          }
        ],
        "annotation": {},
        "desc": "将字符串转成浮点数。",
        "name": "str_to_float",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "子字符串。"
          }
        ],
        "annotation": {},
        "desc": "判断字符串是否以指定的子串结尾。",
        "name": "str_end_with",
        "return": {
          "type": "bool_t",
          "desc": "返回是否以指定的子串结尾。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "子字符串。"
          }
        ],
        "annotation": {},
        "desc": "判断字符串是否以指定的子串开头。",
        "name": "str_start_with",
        "return": {
          "type": "bool_t",
          "desc": "返回是否以指定的子串开头。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要去除的字符集合。"
          }
        ],
        "annotation": {},
        "desc": "去除首尾指定的字符。",
        "name": "str_trim",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要去除的字符集合。"
          }
        ],
        "annotation": {},
        "desc": "去除首部指定的字符。",
        "name": "str_trim_left",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要去除的字符集合。"
          }
        ],
        "annotation": {},
        "desc": "去除尾部指定的字符。",
        "name": "str_trim_right",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "待替换的子串。"
          },
          {
            "type": "char*",
            "name": "new_text",
            "desc": "将替换成的子串。"
          }
        ],
        "annotation": {},
        "desc": "字符串替换。",
        "name": "str_replace",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": "将字符串转成小写。",
        "name": "str_to_lower",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": "将字符串转成大写。",
        "name": "str_to_upper",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": "重置字符串为空。",
        "name": "str_reset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "size",
        "desc": "长度。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "capacity",
        "desc": "容量。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "str",
        "desc": "字符串。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/str.h",
    "desc": "可变长度的UTF8字符串。",
    "name": "str_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "asset_info_t*",
            "name": "res",
            "desc": "数据资源。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建联想字对象。",
        "name": "suggest_words_create",
        "return": {
          "type": "suggest_words_t*",
          "desc": "返回联想字对象。"
        }
      },
      {
        "params": [
          {
            "type": "suggest_words_t*",
            "name": "suggest_words",
            "desc": "联想字对象。"
          },
          {
            "type": "wchar_t",
            "name": "c",
            "desc": "字符。"
          }
        ],
        "annotation": {},
        "desc": "查找prefix对应的联想字列表，成功后会更新words/words_nr。",
        "name": "suggest_words_find",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "suggest_words_t*",
            "name": "suggest_words",
            "desc": "联想字对象。"
          }
        ],
        "annotation": {},
        "desc": "@deconstructor销毁联想字对象。",
        "name": "suggest_words_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "words",
        "desc": "联想字列表。find函数执行成功后会更新。",
        "type": "char*",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "words_nr",
        "desc": "联想字/词个数。find函数执行成功后会更新。",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      }
    ],
    "header": "base/suggest_words.h",
    "desc": "输入法联想字词。",
    "name": "suggest_words_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "获取system_info对象。",
        "name": "system_info",
        "return": {
          "type": "system_info_t*",
          "desc": "返回system_info对象。"
        }
      },
      {
        "params": [
          {
            "type": "app_type_t",
            "name": "app_type",
            "desc": "应用程序的类型。"
          },
          {
            "type": "const char*",
            "name": "app_name",
            "desc": "应用程序的名称。"
          },
          {
            "type": "const char*",
            "name": "app_root",
            "desc": "应用程序的根目录，用于定位资源文件。"
          }
        ],
        "annotation": {},
        "desc": "初始化system_info对象(PC软件才需调用)。",
        "name": "system_info_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "lcd_w",
        "desc": "显示屏的宽度。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "lcd_h",
        "desc": "显示屏的高度。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "lcd_type",
        "desc": "显示屏的类型。",
        "type": "lcd_type_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "device_pixel_ratio",
        "desc": "显示屏的密度。",
        "type": "float_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "lcd_orientation",
        "desc": "显示屏的旋转角度。",
        "type": "lcd_orientation_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "app_type",
        "desc": "应用程序的类型。",
        "type": "app_type_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "app_name",
        "desc": "应用程序的名称。",
        "type": "const char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "app_root",
        "desc": "应用程序的根目录，用于定位资源文件。",
        "type": "const char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/system_info.h",
    "desc": "当前系统的信息。",
    "name": "system_info_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建tab_button_group对象",
        "name": "tab_button_group_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "tab_button_group对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换tab_button_group对象(供脚本语言使用)。",
        "name": "tab_button_group_cast",
        "return": {
          "type": "widget_t*",
          "desc": "tab_button_group对象。"
        }
      }
    ],
    "properties": [
      {
        "name": "compact",
        "desc": "紧凑型排版子控件。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/tab_button_group.h",
    "desc": "Tab Button Group控件。",
    "name": "tab_button_group_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建tab_button对象",
        "name": "tab_button_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "tab_button对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换tab_button对象(供脚本语言使用)。",
        "name": "tab_button_cast",
        "return": {
          "type": "widget_t*",
          "desc": "tab_button对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "tab_button对象。"
          },
          {
            "type": "uint32_t",
            "name": "value",
            "desc": "值"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的值。",
        "name": "tab_button_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "tab_button对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "当前项的图标。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的图标。",
        "name": "tab_button_set_icon",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "tab_button对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "当前项的图标。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的active图标。",
        "name": "tab_button_set_active_icon",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": "值。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "active_icon",
        "desc": "当前项的图标的名称。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "icon",
        "desc": "非当前项的图标的名称。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/tab_button.h",
    "desc": "标签按钮控件。",
    "name": "tab_button_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建tab_control对象",
        "name": "tab_control_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "tab_control对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换tab_control对象(供脚本语言使用)。",
        "name": "tab_control_cast",
        "return": {
          "type": "widget_t*",
          "desc": "tab_control对象。"
        }
      }
    ],
    "properties": [],
    "header": "base/tab_control.h",
    "desc": "标签控件。",
    "name": "tab_control_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [],
    "properties": [],
    "header": "base/theme.h",
    "desc": "控件风格的参数。",
    "name": "style_t"
  },
  {
    "type": "class",
    "methods": [],
    "properties": [],
    "header": "base/theme.h",
    "desc": "主题。",
    "name": "theme_t"
  },
  {
    "type": "enum",
    "desc": "类型常量定义。",
    "consts": [
      {
        "desc": "背景颜色。",
        "name": "STYLE_ID_BG_COLOR"
      },
      {
        "desc": "前景颜色。",
        "name": "STYLE_ID_BG_COLOR"
      },
      {
        "desc": "字体名称。",
        "name": "STYLE_ID_FONT_NAME"
      },
      {
        "desc": "字体大小。",
        "name": "STYLE_ID_FONT_SIZE"
      },
      {
        "desc": "字体风格(粗体、斜体等)。",
        "name": "STYLE_ID_FONT_STYLE"
      },
      {
        "desc": "文本颜色。",
        "name": "STYLE_ID_TEXT_COLOR"
      },
      {
        "desc": "提示文本颜色。",
        "name": "STYLE_ID_TIPS_TEXT_COLOR"
      },
      {
        "desc": "文本水平对齐的方式。",
        "name": "STYLE_ID_TEXT_ALIGN_H"
      },
      {
        "desc": "文本垂直对齐的方式。",
        "name": "STYLE_ID_TEXT_ALIGN_V"
      },
      {
        "desc": "边框颜色。",
        "name": "STYLE_ID_BORDER_COLOR"
      },
      {
        "desc": "边框类型。",
        "name": "STYLE_ID_BORDER"
      },
      {
        "desc": "图片的名称。",
        "name": "STYLE_ID_BG_IMAGE"
      },
      {
        "desc": "图片的显示方式。",
        "name": "STYLE_ID_BG_IMAGE_DRAW_TYPE"
      },
      {
        "desc": "图标的名称。",
        "name": "STYLE_ID_ICON"
      },
      {
        "desc": "图片的名称。",
        "name": "STYLE_ID_FG_IMAGE"
      },
      {
        "desc": "图片的显示方式。",
        "name": "STYLE_ID_FG_IMAGE_DRAW_TYPE"
      },
      {
        "desc": "边距。",
        "name": "STYLE_ID_MARGIN"
      },
      {
        "desc": "图标的位置。",
        "name": "STYLE_ID_ICON_AT"
      }
    ],
    "header": "base/theme.h",
    "name": "style_type_t",
    "prefix": "STYLE"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {},
        "desc": "创建thread对象。",
        "name": "thread_create",
        "return": {
          "type": "thread_t*",
          "desc": "thread对象。"
        }
      },
      {
        "params": [
          {
            "type": "thread_t*",
            "name": "thread",
            "desc": "thread对象。"
          }
        ],
        "annotation": {},
        "desc": "启动线程。",
        "name": "thread_start",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "thread_t*",
            "name": "thread",
            "desc": "thread对象。"
          }
        ],
        "annotation": {},
        "desc": "等待线程退出。",
        "name": "thread_join",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "thread_t*",
            "name": "thread",
            "desc": "thread对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁thread对象。",
        "name": "thread_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [],
    "header": "base/thread.h",
    "desc": "线程对象。",
    "name": "thread_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "timer_get_time_t",
            "name": "get_time",
            "desc": "获取当前时间的函数。"
          }
        ],
        "annotation": {
          "private": true,
          "static": true
        },
        "desc": "初始化定时器系统。",
        "name": "timer_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "timer_func_t",
            "name": "on_timer",
            "desc": "timer回调函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "timer回调函数的上下文。"
          },
          {
            "type": "uint32_t",
            "name": "duration_ms",
            "desc": "时间。"
          }
        ],
        "annotation": {
          "scriptable": "custom",
          "static": true
        },
        "desc": "增加一个timer。",
        "name": "timer_add",
        "return": {
          "type": "uint32_t",
          "desc": "返回timer的ID，0表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "timer_func_t",
            "name": "on_timer",
            "desc": "timer回调函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "timer回调函数的上下文。"
          },
          {
            "type": "uint32_t",
            "name": "duration_ms",
            "desc": "时间。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "用于非GUI线程增加一个timer，本函数向主循环的事件队列中发送一个增加timer的请求。",
        "name": "timer_queue",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "timer_id",
            "desc": "timerID。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "删除指定的timer。",
        "name": "timer_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "timer_id",
            "desc": "timerID。"
          },
          {
            "type": "tk_destroy_t",
            "name": "on_destroy",
            "desc": "回调函数。"
          },
          {
            "type": "void*",
            "name": "on_destroy_ctx",
            "desc": "回调函数上下文。"
          }
        ],
        "annotation": {},
        "desc": "设置一个回调函数，在timer被销毁时调用(方便脚本语言去释放回调函数)。",
        "name": "timer_set_on_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "private": true
        },
        "desc": "查找指定ID的timer。",
        "name": "timer_find",
        "return": {
          "type": "timer_info_t*",
          "desc": "返回timer的信息。"
        }
      },
      {
        "params": [],
        "annotation": {
          "private": true
        },
        "desc": "检查全部timer的函数，如果时间到期，调用相应的timer函数。",
        "name": "timer_dispatch",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true
        },
        "desc": "返回timer的个数。",
        "name": "timer_count",
        "return": {
          "type": "uint32_t",
          "desc": "返回timer的个数。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true
        },
        "desc": "返回最近的timer到期时间。",
        "name": "timer_next_time",
        "return": {
          "type": "uint32_t",
          "desc": "返回最近的timer到期时间。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true
        },
        "desc": "获取当前时间(ms)。",
        "name": "timer_now",
        "return": {
          "type": "uint32_t",
          "desc": "返回获取当前时间(ms)。"
        }
      }
    ],
    "properties": [],
    "header": "base/timer.h",
    "desc": "timer函数在paint之后执行。",
    "name": "timer_t",
    "annotation": {
      "scriptable": true,
      "fake": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tokenizer_t*",
            "name": "tokenizer",
            "desc": "tokenizer对象。"
          },
          {
            "type": "char*",
            "name": "str",
            "desc": "要解析的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "字符串长度。"
          },
          {
            "type": "char*",
            "name": "separtor",
            "desc": "分隔字符。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始化tokenizer对象。",
        "name": "tokenizer_init",
        "return": {
          "type": "tokenizer_t*",
          "desc": "tokenizer对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "tokenizer_t*",
            "name": "tokenizer",
            "desc": "tokenizer对象。"
          }
        ],
        "annotation": {},
        "desc": "是否还有下一个token。",
        "name": "tokenizer_has_more",
        "return": {
          "type": "bool_t",
          "desc": "还有下一个token返回TRUE，否则返回FALSE。"
        }
      },
      {
        "params": [
          {
            "type": "tokenizer_t*",
            "name": "tokenizer",
            "desc": "tokenizer对象。"
          }
        ],
        "annotation": {},
        "desc": "获取下一个token。",
        "name": "tokenizer_next",
        "return": {
          "type": "char*",
          "desc": "成功返回token，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "tokenizer_t*",
            "name": "tokenizer",
            "desc": "tokenizer对象。"
          },
          {
            "type": "int",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {},
        "desc": "获取下一个token，并转换成int。",
        "name": "tokenizer_next_int",
        "return": {
          "type": "char*",
          "desc": "成功返回token的int值，失败返回缺省值。"
        }
      },
      {
        "params": [
          {
            "type": "tokenizer_t*",
            "name": "tokenizer",
            "desc": "tokenizer对象。"
          },
          {
            "type": "float",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {},
        "desc": "获取下一个token，并转换成float。",
        "name": "tokenizer_next_float",
        "return": {
          "type": "char*",
          "desc": "成功返回token的float值，失败返回缺省值。"
        }
      },
      {
        "params": [
          {
            "type": "tokenizer_t*",
            "name": "tokenizer",
            "desc": "tokenizer对象。"
          }
        ],
        "annotation": {},
        "desc": "重置tokenizer。",
        "name": "tokenizer_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "str",
        "desc": "字符串。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "size",
        "desc": "字符串的长度。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "cursor",
        "desc": "当前位置。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "separtor",
        "desc": "字符串。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/tokenizer.h",
    "desc": "从字符串中解析出一个一个的token。",
    "name": "tokenizer_t"
  },
  {
    "type": "enum",
    "desc": "函数返回值常量定义。",
    "consts": [
      {
        "desc": "成功。",
        "name": "RET_OK"
      },
      {
        "desc": "Out of memory。",
        "name": "RET_OOM"
      },
      {
        "desc": "失败。",
        "name": "RET_FAIL"
      },
      {
        "desc": "没有实现/不支持。",
        "name": "RET_NOT_IMPL"
      },
      {
        "desc": "退出。通常用于主循环。",
        "name": "RET_QUIT"
      },
      {
        "desc": "找到。",
        "name": "RET_FOUND"
      },
      {
        "desc": "移出。通常用于定时器。",
        "name": "RET_REMOVE"
      },
      {
        "desc": "重复。通常用于定时器。",
        "name": "RET_REPEAT"
      },
      {
        "desc": "没找到。",
        "name": "RET_NOT_FOUND"
      },
      {
        "desc": "操作完成。",
        "name": "RET_DONE"
      },
      {
        "desc": "停止后续操作。",
        "name": "RET_STOP"
      },
      {
        "desc": "继续后续操作。",
        "name": "RET_CONTINUE"
      },
      {
        "desc": "无效参数。",
        "name": "RET_BAD_PARAMS"
      }
    ],
    "header": "base/types_def.h",
    "name": "ret_t",
    "prefix": "RET_",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "enum",
    "desc": "LCD旋转角度(XXX:目前仅支持0度和90度)。",
    "consts": [
      {
        "desc": "LCD没有旋转。",
        "name": "LCD_ORIENTATION_0"
      },
      {
        "desc": "LCD旋转90度。",
        "name": "LCD_ORIENTATION_90"
      },
      {
        "desc": "LCD旋转180度。",
        "name": "LCD_ORIENTATION_180"
      },
      {
        "desc": "LCD旋转270度。",
        "name": "LCD_ORIENTATION_270"
      }
    ],
    "header": "base/types_def.h",
    "name": "lcd_orientation_t",
    "prefix": "LCD_ORIENTATION_"
  },
  {
    "type": "enum",
    "desc": "垂直对齐的常量定义。",
    "consts": [
      {
        "desc": "无效对齐方式。",
        "name": "ALIGN_V_NONE"
      },
      {
        "desc": "居中对齐。",
        "name": "ALIGN_V_MIDDLE"
      },
      {
        "desc": "顶部对齐。",
        "name": "ALIGN_V_TOP"
      },
      {
        "desc": "底部对齐。",
        "name": "ALIGN_V_BOTTOM"
      }
    ],
    "header": "base/types_def.h",
    "name": "align_v_t",
    "prefix": "ALIGN_V_",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "enum",
    "desc": "水平对齐的常量定义。",
    "consts": [
      {
        "desc": "无效对齐方式。",
        "name": "ALIGN_H_NONE"
      },
      {
        "desc": "居中对齐。",
        "name": "ALIGN_H_CENTER"
      },
      {
        "desc": "左边对齐。",
        "name": "ALIGN_H_LEFT"
      },
      {
        "desc": "右边对齐。",
        "name": "ALIGN_H_RIGHT"
      }
    ],
    "header": "base/types_def.h",
    "name": "align_h_t",
    "prefix": "ALIGN_H_",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "enum",
    "desc": "控件边框类型。",
    "consts": [
      {
        "desc": "无边框。",
        "name": "BORDER_NONE"
      },
      {
        "desc": "左边框线。",
        "name": "BORDER_LEFT"
      },
      {
        "desc": "右边框线。",
        "name": "BORDER_RIGHT"
      },
      {
        "desc": "上边框线。",
        "name": "BORDER_TOP"
      },
      {
        "desc": "下边框线。",
        "name": "BORDER_BOTTOM"
      },
      {
        "desc": "全边框线。",
        "name": "BORDER_ALL"
      }
    ],
    "header": "base/types_def.h",
    "name": "border_type_t",
    "prefix": "BORDER_TYPE_"
  },
  {
    "type": "enum",
    "desc": "图标所在的位置。",
    "consts": [
      {
        "desc": "自动选择位置。",
        "name": "ICON_AT_AUTO"
      },
      {
        "desc": "水平左边，垂直居中。",
        "name": "ICON_AT_LEFT"
      },
      {
        "desc": "水平右边，垂直居中(not used now)。",
        "name": "ICON_AT_RIGHT"
      },
      {
        "desc": "水平居中，垂直顶部(not used now)。",
        "name": "ICON_AT_TOP"
      },
      {
        "desc": "水平居中，垂直低部(not used now)。",
        "name": "ICON_AT_BOTTOM"
      }
    ],
    "header": "base/types_def.h",
    "name": "icon_at_type_t",
    "prefix": "ICON_AT"
  },
  {
    "type": "enum",
    "desc": "应用程序类型。",
    "consts": [
      {
        "desc": "嵌入式或移动APP",
        "name": "APP_MOBILE"
      },
      {
        "desc": "模拟器。",
        "name": "APP_SIMULATOR"
      },
      {
        "desc": "桌面应用程序。",
        "name": "APP_DESKTOP"
      }
    ],
    "header": "base/types_def.h",
    "name": "app_type_t",
    "prefix": "APP_"
  },
  {
    "type": "enum",
    "desc": "类型常量定义。",
    "consts": [
      {
        "desc": "无效类型。",
        "name": "VALUE_TYPE_INVALID"
      },
      {
        "desc": "BOOL类型。",
        "name": "VALUE_TYPE_BOOL"
      },
      {
        "desc": "int8_t类型。",
        "name": "VALUE_TYPE_INT8"
      },
      {
        "desc": "uint8_t类型。",
        "name": "VALUE_TYPE_UINT8"
      },
      {
        "desc": "int16_t类型。",
        "name": "VALUE_TYPE_INT16"
      },
      {
        "desc": "uint16_t类型。",
        "name": "VALUE_TYPE_UINT16"
      },
      {
        "desc": "int32_t类型。",
        "name": "VALUE_TYPE_INT32"
      },
      {
        "desc": "uint32_t类型。",
        "name": "VALUE_TYPE_UINT32"
      },
      {
        "desc": "int64_t类型。",
        "name": "VALUE_TYPE_INT64"
      },
      {
        "desc": "uint64_t类型。",
        "name": "VALUE_TYPE_UINT64"
      },
      {
        "desc": "void*类型。",
        "name": "VALUE_TYPE_POINTER"
      },
      {
        "desc": "float类型。",
        "name": "VALUE_TYPE_FLOAT"
      },
      {
        "desc": "double类型。",
        "name": "VALUE_TYPE_DOUBLE"
      },
      {
        "desc": "char*类型。",
        "name": "VALUE_TYPE_STRING"
      },
      {
        "desc": "wchar_t*类型。",
        "name": "VALUE_TYPE_WSTRING"
      }
    ],
    "header": "base/value.h",
    "name": "value_type_t",
    "prefix": "VALUE_TYPE_",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "bool_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为bool的值。",
        "name": "value_set_bool",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为bool的值。",
        "name": "value_bool",
        "return": {
          "type": "bool_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "int8_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为int8的值。",
        "name": "value_set_int8",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为int8的值。",
        "name": "value_int8",
        "return": {
          "type": "int8_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "uint8_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为uint8的值。",
        "name": "value_set_uint8",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为uint8的值。",
        "name": "value_uint8",
        "return": {
          "type": "int8_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "int16_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为int16的值。",
        "name": "value_set_int16",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为int16的值。",
        "name": "value_int16",
        "return": {
          "type": "int16_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "uint16_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为uint16的值。",
        "name": "value_set_uint16",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为uint16的值。",
        "name": "value_uint16",
        "return": {
          "type": "uint16_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为int32的值。",
        "name": "value_set_int32",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为int32的值。",
        "name": "value_int32",
        "return": {
          "type": "int32_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "uint32_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为uint32的值。",
        "name": "value_set_uint32",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {},
        "desc": "获取类型为uint32的值。",
        "name": "value_uint32",
        "return": {
          "type": "uint32_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "int64_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为int64的值。",
        "name": "value_set_int64",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为int64的值。",
        "name": "value_int64",
        "return": {
          "type": "int64_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "uint64_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为uint64的值。",
        "name": "value_set_uint64",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为uint64的值。",
        "name": "value_uint64",
        "return": {
          "type": "uint64_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "pointer_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {},
        "desc": "设置类型为pointer的值。",
        "name": "value_set_pointer",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {},
        "desc": "获取类型为pointer的值。",
        "name": "value_pointer",
        "return": {
          "type": "void*",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "float",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为float的值。",
        "name": "value_set_float",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为float的值。",
        "name": "value_float",
        "return": {
          "type": "float",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "double",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为double的值。",
        "name": "value_set_double",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为double的值。",
        "name": "value_double",
        "return": {
          "type": "double",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "char*",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为char*的值。",
        "name": "value_set_str",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为str_t的值。",
        "name": "value_str",
        "return": {
          "type": "const char*",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "value",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "判断value是否为空值。",
        "name": "value_is_null",
        "return": {
          "type": "bool_t",
          "desc": "为空值返回TRUE，否则返回FALSE。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "value",
            "desc": "value对象。"
          },
          {
            "type": "value_t*",
            "name": "other",
            "desc": "value对象。"
          }
        ],
        "annotation": {},
        "desc": "判断两个value是否相同。",
        "name": "value_equal",
        "return": {
          "type": "bool_t",
          "desc": "为空值返回TRUE，否则返回FALSE。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "转换为int的值。",
        "name": "value_int",
        "return": {
          "type": "int",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "dst",
            "desc": "目的value对象。"
          },
          {
            "type": "value_t*",
            "name": "src",
            "desc": "源value对象。"
          }
        ],
        "annotation": {},
        "desc": "拷贝value的值。",
        "name": "value_copy",
        "return": {
          "type": "void",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为int的值。",
        "name": "value_set_int",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建value对象",
        "name": "value_create",
        "return": {
          "type": "value_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true
        },
        "desc": "@deconstructor销毁value对象",
        "name": "value_destroy",
        "return": {
          "type": "void",
          "desc": ""
        }
      }
    ],
    "properties": [
      {
        "name": "type",
        "desc": "类型。",
        "type": "int8_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/value.h",
    "desc": "一个通用数据类型，用来存放整数、浮点数、obj_t、str_t和其它对象。",
    "name": "value_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [],
    "properties": [],
    "header": "base/velocity.h",
    "desc": "velocity。",
    "name": "velocity_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "uint32_t",
            "name": "h",
            "desc": "高度"
          },
          {
            "type": "bitmap_format_t",
            "name": "format",
            "desc": "如果data是framebuffer，format指定data的格式。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "framebuffer或其它ctx。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建vgcanvas。",
        "name": "vgcanvas_create",
        "return": {
          "type": "vgcanvas_t",
          "desc": "返回vgcanvas"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {},
        "desc": "begin path",
        "name": "vgcanvas_begin_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "uint32_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "uint32_t",
            "name": "h",
            "desc": "高度"
          },
          {
            "type": "bitmap_format_t",
            "name": "format",
            "desc": "如果data是framebuffer，format指定data的格式。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "framebuffer或其它ctx。"
          }
        ],
        "annotation": {},
        "desc": "重新初始化，系统内部调用。",
        "name": "vgcanvas_reinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "rect_t*",
            "name": "dirty_rect",
            "desc": "需要绘制的区域。"
          }
        ],
        "annotation": {},
        "desc": "开始绘制，系统内部调用。",
        "name": "vgcanvas_begin_frame",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {},
        "desc": "move to",
        "name": "vgcanvas_move_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {},
        "desc": "line to。",
        "name": "vgcanvas_line_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "cpx",
            "desc": "控制点x坐标。"
          },
          {
            "type": "float_t",
            "name": "cpy",
            "desc": "控制点y坐标。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {},
        "desc": "quadratic curve to",
        "name": "vgcanvas_quad_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "cp1x",
            "desc": "控制点1x坐标。"
          },
          {
            "type": "float_t",
            "name": "cp1y",
            "desc": "控制点1y坐标。"
          },
          {
            "type": "float_t",
            "name": "cp2x",
            "desc": "控制点2x坐标。"
          },
          {
            "type": "float_t",
            "name": "cp2y",
            "desc": "控制点3y坐标。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {},
        "desc": "bezier curve to",
        "name": "vgcanvas_bezier_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x1",
            "desc": "起始点x坐标。"
          },
          {
            "type": "float_t",
            "name": "y1",
            "desc": "起始点y坐标。"
          },
          {
            "type": "float_t",
            "name": "x2",
            "desc": "结束点x坐标。"
          },
          {
            "type": "float_t",
            "name": "y2",
            "desc": "结束点y坐标。"
          },
          {
            "type": "float_t",
            "name": "r",
            "desc": "半径。"
          }
        ],
        "annotation": {},
        "desc": "arc to",
        "name": "vgcanvas_arc_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "原点x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "原点y坐标。"
          },
          {
            "type": "float_t",
            "name": "r",
            "desc": "半径。"
          },
          {
            "type": "float_t",
            "name": "start_angle",
            "desc": "起始角度。"
          },
          {
            "type": "float_t",
            "name": "end_angle",
            "desc": "结束角度。"
          },
          {
            "type": "bool_t",
            "name": "ccw",
            "desc": "是否逆时针。"
          }
        ],
        "annotation": {},
        "desc": "arc",
        "name": "vgcanvas_arc",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {},
        "desc": "检查点是否在当前路径中。",
        "name": "vgcanvas_is_point_in_path",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示在，否则表示不在。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "float_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "float_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {},
        "desc": "rect",
        "name": "vgcanvas_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "float_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "float_t",
            "name": "h",
            "desc": "高度。"
          },
          {
            "type": "float_t",
            "name": "r",
            "desc": "圆角半径。"
          }
        ],
        "annotation": {},
        "desc": "round rect",
        "name": "vgcanvas_rounded_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "float_t",
            "name": "rx",
            "desc": "圆角半径。"
          },
          {
            "type": "float_t",
            "name": "ry",
            "desc": "圆角半径。"
          }
        ],
        "annotation": {},
        "desc": "ellipse",
        "name": "vgcanvas_ellipse",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {},
        "desc": "close_path",
        "name": "vgcanvas_close_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {},
        "desc": "reset",
        "name": "vgcanvas_reset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {},
        "desc": "flush",
        "name": "vgcanvas_flush",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "float_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "float_t",
            "name": "h",
            "desc": "高度。"
          },
          {
            "type": "color_t",
            "name": "c",
            "desc": "颜色。"
          }
        ],
        "annotation": {},
        "desc": "clear rect",
        "name": "vgcanvas_clear_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "rad",
            "desc": "角度"
          }
        ],
        "annotation": {},
        "desc": "rotate",
        "name": "vgcanvas_rotate",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x方向缩放比例。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y方向缩放比例。"
          }
        ],
        "annotation": {},
        "desc": "scale",
        "name": "vgcanvas_scale",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x方向偏移。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y方向偏移。"
          }
        ],
        "annotation": {},
        "desc": "scale",
        "name": "vgcanvas_translate",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "a",
            "desc": "a"
          },
          {
            "type": "float_t",
            "name": "b",
            "desc": "b"
          },
          {
            "type": "float_t",
            "name": "c",
            "desc": "c"
          },
          {
            "type": "float_t",
            "name": "d",
            "desc": "d"
          },
          {
            "type": "float_t",
            "name": "e",
            "desc": "e"
          },
          {
            "type": "float_t",
            "name": "f",
            "desc": "f"
          }
        ],
        "annotation": {},
        "desc": "transform",
        "name": "vgcanvas_transform",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "a",
            "desc": "a"
          },
          {
            "type": "float_t",
            "name": "b",
            "desc": "b"
          },
          {
            "type": "float_t",
            "name": "c",
            "desc": "c"
          },
          {
            "type": "float_t",
            "name": "d",
            "desc": "d"
          },
          {
            "type": "float_t",
            "name": "e",
            "desc": "e"
          },
          {
            "type": "float_t",
            "name": "f",
            "desc": "f"
          }
        ],
        "annotation": {},
        "desc": "set transform",
        "name": "vgcanvas_set_transform",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "float_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "float_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {},
        "desc": "clip_rect",
        "name": "vgcanvas_clip_rect",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {},
        "desc": "填充多边形。",
        "name": "vgcanvas_fill",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {},
        "desc": "画线。",
        "name": "vgcanvas_stroke",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "bool_t",
            "name": "stroke",
            "desc": "TRUE表示画线FALSE表示填充。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "图片。"
          }
        ],
        "annotation": {},
        "desc": "用图片填充/画多边形(可能存在可移植性问题，除非必要请勿使用)。多边形的顶点必须在图片范围内，可以通过矩阵变化画到不同的位置。",
        "name": "vgcanvas_paint",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "char*",
            "name": "font",
            "desc": "字体名称。"
          }
        ],
        "annotation": {},
        "desc": "set font",
        "name": "vgcanvas_set_font",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "font",
            "desc": "字体大小。"
          }
        ],
        "annotation": {},
        "desc": "set font size",
        "name": "vgcanvas_set_font_size",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "char*",
            "name": "value",
            "desc": "取值：left|center|right，必须为常量字符串。"
          }
        ],
        "annotation": {},
        "desc": "set text align",
        "name": "vgcanvas_set_text_align",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "char*",
            "name": "value",
            "desc": "取值：top|middle|bottom，必须为常量字符串。"
          }
        ],
        "annotation": {},
        "desc": "set text baseline",
        "name": "vgcanvas_set_text_baseline",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "text"
          },
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "float_t",
            "name": "max_width",
            "desc": "最大宽度。"
          }
        ],
        "annotation": {},
        "desc": "fill text",
        "name": "vgcanvas_fill_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "text"
          }
        ],
        "annotation": {},
        "desc": "measure text",
        "name": "vgcanvas_measure_text",
        "return": {
          "type": "float_t",
          "desc": "返回text的宽度。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "图片。"
          },
          {
            "type": "float_t",
            "name": "sx",
            "desc": "sx"
          },
          {
            "type": "float_t",
            "name": "sy",
            "desc": "sy"
          },
          {
            "type": "float_t",
            "name": "sw",
            "desc": "sw"
          },
          {
            "type": "float_t",
            "name": "sh",
            "desc": "sh"
          },
          {
            "type": "float_t",
            "name": "dx",
            "desc": "dx"
          },
          {
            "type": "float_t",
            "name": "dy",
            "desc": "dy"
          },
          {
            "type": "float_t",
            "name": "dw",
            "desc": "dw"
          },
          {
            "type": "float_t",
            "name": "dh",
            "desc": "dh"
          }
        ],
        "annotation": {},
        "desc": "draw image",
        "name": "vgcanvas_draw_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "bitmap_t*",
            "name": "img",
            "desc": "图片。"
          },
          {
            "type": "float_t",
            "name": "sx",
            "desc": "sx"
          },
          {
            "type": "float_t",
            "name": "sy",
            "desc": "sy"
          },
          {
            "type": "float_t",
            "name": "sw",
            "desc": "sw"
          },
          {
            "type": "float_t",
            "name": "sh",
            "desc": "sh"
          },
          {
            "type": "float_t",
            "name": "dx",
            "desc": "dx"
          },
          {
            "type": "float_t",
            "name": "dy",
            "desc": "dy"
          },
          {
            "type": "float_t",
            "name": "dw",
            "desc": "dw"
          },
          {
            "type": "float_t",
            "name": "dh",
            "desc": "dh"
          }
        ],
        "annotation": {},
        "desc": "draw icon",
        "name": "vgcanvas_draw_icon",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "bool_t",
            "name": "value",
            "desc": "是否启用反走样。"
          }
        ],
        "annotation": {},
        "desc": "set antialias",
        "name": "vgcanvas_set_antialias",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "alpha",
            "desc": "global alpha。"
          }
        ],
        "annotation": {},
        "desc": "set global alpha",
        "name": "vgcanvas_set_global_alpha",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "value",
            "desc": "线宽。"
          }
        ],
        "annotation": {},
        "desc": "set line width",
        "name": "vgcanvas_set_line_width",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "color_t",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {},
        "desc": "set fill color",
        "name": "vgcanvas_set_fill_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "color_t",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {},
        "desc": "set stroke color",
        "name": "vgcanvas_set_stroke_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "char*",
            "name": "value",
            "desc": "取值：butt|round|square，必须为常量字符串。"
          }
        ],
        "annotation": {},
        "desc": "set line cap",
        "name": "vgcanvas_set_line_cap",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "char*",
            "name": "value",
            "desc": "取值：bevel|round|miter，必须为常量字符串。"
          }
        ],
        "annotation": {},
        "desc": "set line join",
        "name": "vgcanvas_set_line_join",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          },
          {
            "type": "float_t",
            "name": "value",
            "desc": "miter limit"
          }
        ],
        "annotation": {},
        "desc": "set miter limit",
        "name": "vgcanvas_set_miter_limit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {},
        "desc": "save",
        "name": "vgcanvas_save",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {},
        "desc": "restore",
        "name": "vgcanvas_restore",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {},
        "desc": "结束绘制。系统内部调用。",
        "name": "vgcanvas_end_frame",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "vgcanvas_t*",
            "name": "vg",
            "desc": "vgcanvas对象。"
          }
        ],
        "annotation": {},
        "desc": "destroy",
        "name": "vgcanvas_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "w",
        "desc": "canvas的宽度",
        "type": "wh_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "height",
        "desc": "canvas的高度",
        "type": "wh_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "ratio",
        "desc": "显示比例。",
        "type": "float_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "anti_alias",
        "desc": "是否启用反走样功能。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "line_width",
        "desc": "线宽。",
        "type": "float_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "global_alpha",
        "desc": "全局alpha。",
        "type": "float_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "miter_limit",
        "desc": "miter_limit。@see http://www.w3school.com.cn/tags/canvas_miterlimit.asp",
        "type": "float_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "line_cap",
        "desc": "line_cap。@see http://www.w3school.com.cn/tags/canvas_linecap.asp",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "line_join",
        "desc": "line_join。@see http://www.w3school.com.cn/tags/canvas_linejoin.asp",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "font",
        "desc": "字体。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "font_size",
        "desc": "字体大小。",
        "type": "float_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "text_align",
        "desc": "text_align。@see http://www.w3school.com.cn/tags/canvas_textalign.asp",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "text_baseline",
        "desc": "text_baseline。@see http://www.w3school.com.cn/tags/canvas_textbaseline.asp",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "fill_color",
        "desc": "填充颜色",
        "type": "color_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "stroke_color",
        "desc": "线条颜色",
        "type": "color_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "buff;",
        "desc": "frame buffer",
        "type": "uint32_t*",
        "annotation": {
          "private": true
        }
      }
    ],
    "header": "base/vgcanvas.h",
    "desc": "矢量图画布抽象基类。",
    "name": "vgcanvas_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建view对象",
        "name": "view_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "view对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为view对象(供脚本语言使用)。",
        "name": "view_cast",
        "return": {
          "type": "widget_t*",
          "desc": "view对象。"
        }
      }
    ],
    "properties": [],
    "header": "base/view.h",
    "desc": "一个通用的容器控件，也可以用作自绘。",
    "name": "view_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "params": [
      {
        "type": "widget_t*",
        "name": "widget",
        "desc": "动画应用的控件。"
      },
      {
        "type": "const char*",
        "name": "params",
        "desc": "参数。"
      }
    ],
    "annotation": {
      "global": true
    },
    "desc": "创建animator对象。",
    "name": "widget_animator_create",
    "return": {
      "type": "widget_animator_t*",
      "desc": "动画对象。"
    },
    "type": "method",
    "header": "base/widget_animator_factory.h"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象本身。"
          },
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "duration",
            "desc": "动画持续时间。"
          },
          {
            "type": "uint32_t",
            "name": "delay",
            "desc": "动画执行时间。"
          },
          {
            "type": "easing_func_t",
            "name": "",
            "desc": "。"
          }
        ],
        "annotation": {},
        "desc": "初始化。仅供子类内部使用。",
        "name": "widget_animator_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象本身。"
          }
        ],
        "annotation": {},
        "desc": "启动动画。",
        "name": "widget_animator_start",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象本身。"
          },
          {
            "type": "uint32_t",
            "name": "yoyo_times",
            "desc": "yoyo的次数，往返视为两次。"
          }
        ],
        "annotation": {},
        "desc": "设置为yoyo模式。",
        "name": "widget_animator_set_yoyo",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象本身。"
          },
          {
            "type": "uint32_t",
            "name": "repeat_times",
            "desc": "重复的次数。"
          }
        ],
        "annotation": {},
        "desc": "设置为重复模式。",
        "name": "widget_animator_set_repeat",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象本身。"
          },
          {
            "type": "bool_t",
            "name": "value",
            "desc": "是否为逆向模式。"
          }
        ],
        "annotation": {},
        "desc": "设置为逆向模式。",
        "name": "widget_animator_set_reversed",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象本身。"
          },
          {
            "type": "event_type_t",
            "name": "",
            "desc": "e"
          },
          {
            "type": "event_func_t",
            "name": "on_event",
            "desc": "事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {
          "scriptable": "custom"
        },
        "desc": "注册指定事件的处理函数。事件类型。目前支持：EVT_ANIM_START,EVT_ANIM_STOP,EVT_ANIM_ONCE和EVT_ANIM_END。",
        "name": "widget_animator_on",
        "return": {
          "type": "uint32_t",
          "desc": "返回id，用于widget_animator_off。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象本身。"
          },
          {
            "type": "uint32_t",
            "name": "id",
            "desc": "widget_animator_on返回的ID。"
          }
        ],
        "annotation": {
          "scriptable": "custom"
        },
        "desc": "注销指定事件的处理函数。",
        "name": "widget_animator_off",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象本身。"
          }
        ],
        "annotation": {},
        "desc": "销毁animator对象。",
        "name": "widget_animator_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "widget",
        "desc": "控件对象。",
        "type": "widget_t*",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "reversed",
        "desc": "逆向运行，在yoyo模式下自动设置。",
        "type": "bool_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "yoyo_times",
        "desc": "yoyo剩余次数。",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "repeat_times",
        "desc": "重复剩余次数。",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "now",
        "desc": "当前时间(毫秒)。",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "start_time",
        "desc": "起始时间(毫秒)。",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "delay",
        "desc": "延迟执行时间(毫秒)。",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "duration",
        "desc": "单次动画执行时间(毫秒)。",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "emitter",
        "desc": "emitter",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "timer_id",
        "desc": "定时器ID。",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "widget_destroy_id",
        "desc": "widget_destroy_id。",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "easing",
        "desc": "插值函数。",
        "type": "easing_func_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "update",
        "desc": "update函数，子类需要实现。",
        "type": "widget_animator_update_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "destroy",
        "desc": "destroy函数，子类需要实现。",
        "type": "widget_animator_destroy_t",
        "annotation": {
          "private": true
        }
      }
    ],
    "header": "base/widget_animator.h",
    "desc": "控件动画接口。",
    "name": "widget_animator_t"
  },
  {
    "type": "enum",
    "desc": "控件的属性。",
    "consts": [
      {
        "desc": "X坐标。",
        "name": "WIDGET_PROP_X"
      },
      {
        "desc": "Y坐标。",
        "name": "WIDGET_PROP_Y"
      },
      {
        "desc": "宽度。",
        "name": "WIDGET_PROP_W"
      },
      {
        "desc": "高度。",
        "name": "WIDGET_PROP_H"
      },
      {
        "desc": "最小宽度。",
        "name": "WIDGET_PROP_MIN_W"
      },
      {
        "desc": "最大宽度。",
        "name": "WIDGET_PROP_MAX_W"
      },
      {
        "desc": "layout宽度。",
        "name": "WIDGET_PROP_LAYOUT_W"
      },
      {
        "desc": "layout高度。",
        "name": "WIDGET_PROP_LAYOUT_H"
      },
      {
        "desc": "虚拟宽度。",
        "name": "WIDGET_PROP_VIRTUAL_W"
      },
      {
        "desc": "虚拟高度。",
        "name": "WIDGET_PROP_VIRTUAL_H"
      },
      {
        "desc": "名称。",
        "name": "WIDGET_PROP_NAME"
      },
      {
        "desc": "鼠标指针。",
        "name": "WIDGET_PROP_CURSOR"
      },
      {
        "desc": "值。",
        "name": "WIDGET_PROP_VALUE"
      },
      {
        "desc": "文本。",
        "name": "WIDGET_PROP_TEXT"
      },
      {
        "desc": "待翻译文本。",
        "name": "WIDGET_PROP_TR_TEXT"
      },
      {
        "desc": "style。",
        "name": "WIDGET_PROP_STYLE"
      },
      {
        "desc": "是否启用。",
        "name": "WIDGET_PROP_ENABLE"
      },
      {
        "desc": "边距。",
        "name": "WIDGET_PROP_MARGIN"
      },
      {
        "desc": "间距。",
        "name": "WIDGET_PROP_SPACING"
      },
      {
        "desc": "左边距。",
        "name": "WIDGET_PROP_LEFT_MARGIN"
      },
      {
        "desc": "右边距。",
        "name": "WIDGET_PROP_RIGHT_MARGIN"
      },
      {
        "desc": "顶边距。",
        "name": "WIDGET_PROP_TOP_MARGIN"
      },
      {
        "desc": "底边距。",
        "name": "WIDGET_PROP_BOTTOM_MARGIN"
      },
      {
        "desc": "步长。",
        "name": "WIDGET_PROP_STEP"
      },
      {
        "desc": "是否可见。",
        "name": "WIDGET_PROP_VISIBLE"
      },
      {
        "desc": "控件动画。",
        "name": "WIDGET_PROP_ANIMATION"
      },
      {
        "desc": "窗口动画。",
        "name": "WIDGET_PROP_ANIM_HINT"
      },
      {
        "desc": "打开窗口动画。",
        "name": "WIDGET_PROP_OPEN_ANIM_HINT"
      },
      {
        "desc": "关闭窗口动画。",
        "name": "WIDGET_PROP_CLOSE_ANIM_HINT"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_MIN"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_TIPS"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_INPUT_TYPE"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_READONLY"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_PASSWORD_VISIBLE"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_ACTIVE"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_VERTICAL"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_SHOW_TEXT"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_XOFFSET"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_YOFFSET"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_AUTO_PLAY"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_AUTO_FIX"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_X_MIN"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_X_MAX"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_Y_MIN"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_Y_MAX"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_MAX"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_ROW"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_THEME"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_SCRIPT"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_ITEM_WIDTH"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_ITEM_HEIGHT"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_DEFAULT_ITEM_HEIGHT"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_XSLIDABLE"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_YSLIDABLE"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_REPEAT"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_ANIMATABLE"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_AUTO_HIDE_SCROLL_BAR"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_IMAGE"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_DRAW_TYPE"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_SELECTABLE"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_CLICKABLE"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_SCALE_X"
      },
      {
        "desc": "",
        "name": "WIDGET_PROP_SCALE_Y"
      },
      {
        "desc": "x锚点。",
        "name": "WIDGET_PROP_ANCHOR_X"
      },
      {
        "desc": "y锚点。",
        "name": "WIDGET_PROP_ANCHOR_Y"
      },
      {
        "desc": "选中角度(幅度)",
        "name": "WIDGET_PROP_ROTATION"
      },
      {
        "desc": "sub theme。",
        "name": "WIDGET_PROP_SUB_THEME"
      },
      {
        "desc": "紧凑模式。",
        "name": "WIDGET_PROP_COMPACT"
      },
      {
        "desc": "图标名称。",
        "name": "WIDGET_PROP_ICON"
      },
      {
        "desc": "选项集合。",
        "name": "WIDGET_PROP_OPTIONS"
      },
      {
        "desc": "是否被选中。",
        "name": "WIDGET_PROP_SELECTED"
      },
      {
        "desc": "active状态下的图标。",
        "name": "WIDGET_PROP_ACTIVE_ICON"
      },
      {
        "desc": "要打开窗口的名称。",
        "name": "WIDGET_PROP_OPEN_WINDOW"
      },
      {
        "desc": "被选中项的索引。",
        "name": "WIDGET_PROP_SELECTED_INDEX"
      },
      {
        "desc": "点击窗口时关闭窗口。",
        "name": "WIDGET_PROP_CLOSE_WHEN_CLICK"
      },
      {
        "desc": "点击窗口外部时关闭窗口。",
        "name": "WIDGET_PROP_CLOSE_WHEN_CLICK_OUTSIDE"
      },
      {
        "desc": "行间距。",
        "name": "WIDGET_PROP_LINE_GAP"
      },
      {
        "desc": "背景颜色(仅仅使用于color tile)。",
        "name": "WIDGET_PROP_BG_COLOR"
      },
      {
        "desc": "边框颜色(仅仅使用于color tile)。",
        "name": "WIDGET_PROP_BORDER_COLOR"
      },
      {
        "desc": "延迟时间(毫秒)",
        "name": "WIDGET_PROP_DELAY"
      }
    ],
    "header": "base/widget_consts.h",
    "name": "widget_prop_t",
    "prefix": "WIDGET_PROP_",
    "annotation": {
      "scriptable": true,
      "string": true
    }
  },
  {
    "type": "enum",
    "desc": "控件的类型。",
    "consts": [
      {
        "desc": "",
        "name": "WIDGET_TYPE_NONE"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_WINDOW_MANAGER"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_NORMAL_WINDOW"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_TOOL_BAR"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_DIALOG"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_POPUP"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_SPRITE"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_KEYBOARD"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_DND"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_LABEL"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_BUTTON"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_IMAGE"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_EDIT"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_PROGRESS_BAR"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_GROUP_BOX"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_CHECK_BUTTON"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_RADIO_BUTTON"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_DIALOG_TITLE"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_DIALOG_CLIENT"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_SLIDER"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_VIEW"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_COMBO_BOX"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_COMBO_BOX_ITEM"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_SLIDE_VIEW"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_PAGES"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_TAB_BUTTON"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_TAB_CONTROL"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_TAB_BUTTON_GROUP"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_BUTTON_GROUP"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_CANDIDATES"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_SPIN_BOX"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_DRAGGER"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_SCROLL_BAR"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_SCROLL_BAR_DESKTOP"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_SCROLL_BAR_MOBILE"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_SCROLL_VIEW"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_LIST_VIEW"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_LIST_VIEW_H"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_LIST_ITEM"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_COLOR_PICKER"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_COLOR_COMPONENT"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_COLOR_TILE"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_RICH_TEXT"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_APP_BAR"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_GRID"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_ROW"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_COLUMN"
      },
      {
        "desc": "",
        "name": "WIDGET_TYPE_CALIBRATION_WIN"
      }
    ],
    "header": "base/widget_consts.h",
    "name": "widget_type_t",
    "prefix": "WIDGET_TYPE_",
    "annotation": {
      "scriptable": true,
      "string": true
    }
  },
  {
    "type": "enum",
    "desc": "控件状态常量定义。",
    "consts": [
      {
        "desc": "无效状态。",
        "name": "WIDGET_STATE_NONE"
      },
      {
        "desc": "正常状态。",
        "name": "WIDGET_STATE_NORMAL"
      },
      {
        "desc": "指针按下状态。",
        "name": "WIDGET_STATE_PRESSED"
      },
      {
        "desc": "指针悬浮状态。",
        "name": "WIDGET_STATE_OVER"
      },
      {
        "desc": "禁用状态。",
        "name": "WIDGET_STATE_DISABLE"
      },
      {
        "desc": "聚焦状态。",
        "name": "WIDGET_STATE_FOCUSED"
      },
      {
        "desc": "勾选状态。",
        "name": "WIDGET_STATE_CHECKED"
      },
      {
        "desc": "没勾选状态。",
        "name": "WIDGET_STATE_UNCHECKED"
      },
      {
        "desc": "编辑器无内容状态。",
        "name": "WIDGET_STATE_EMPTY"
      },
      {
        "desc": "输入错误状态。",
        "name": "WIDGET_STATE_ERROR"
      },
      {
        "desc": "输入错误状态。",
        "name": "WIDGET_STATE_SELECTED"
      }
    ],
    "header": "base/widget_consts.h",
    "name": "widget_state_t",
    "prefix": "WIDGET_",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "widget的父控件。"
          },
          {
            "type": "widget_vtable_t*",
            "name": "vt",
            "desc": "虚表。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": "初始化控件。仅在子类控件构造函数中使用。",
        "name": "widget_init",
        "return": {
          "type": "widget_t*",
          "desc": "widget对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": "让控件根据自己当前状态更新style。",
        "name": "widget_update_style",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": "让控件及其全部子控件根据自己当前状态更新style。",
        "name": "widget_update_style_recursive",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取子控件的个数。",
        "name": "widget_count_children",
        "return": {
          "type": "int32_t",
          "desc": "子控件的个数。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "index",
            "desc": "索引"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定索引的子控件。",
        "name": "widget_get_child",
        "return": {
          "type": "widget_t*",
          "desc": "子控件。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取控件在父控件中的索引编号。",
        "name": "widget_index_of",
        "return": {
          "type": "int32_t",
          "desc": "在父控件中的索引编号。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "移动控件。",
        "name": "widget_move",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "调整控件的大小。",
        "name": "widget_resize",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "移动控件并调整控件的大小。",
        "name": "widget_move_resize",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的值。只是对widget_set_prop的包装，值的意义由子类控件决定。",
        "name": "widget_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "delta",
            "desc": "增量。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "增加控件的值。只是对widget_set_prop的包装，值的意义由子类控件决定。",
        "name": "widget_add_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "wchar_t*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {},
        "desc": "设置控件的文本。只是对widget_set_prop的包装，文本的意义由子类控件决定。",
        "name": "widget_set_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "style",
            "desc": "style的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "启用指定的主题。",
        "name": "widget_use_style",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的文本。只是对widget_set_prop的包装，文本的意义由子类控件决定。",
        "name": "widget_set_text_utf8",
        "alias": "set_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取翻译之后的文本，然后调用widget_set_text。",
        "name": "widget_set_tr_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": "语言改变后，重新翻译控件上的文本(包括子控件)。",
        "name": "widget_re_translate_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取控件的值。只是对widget_get_prop的包装，值的意义由子类控件决定。",
        "name": "widget_get_value",
        "return": {
          "type": "int32_t",
          "desc": "返回值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取控件的文本。只是对widget_get_prop的包装，文本的意义由子类控件决定。",
        "name": "widget_get_text",
        "return": {
          "type": "wchar_t*",
          "desc": "返回文本。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "point_t*",
            "name": "p",
            "desc": "坐标点。"
          }
        ],
        "annotation": {},
        "desc": "将全局坐标转换成控件内的本地坐标，即相对于控件左上角的坐标。",
        "name": "widget_to_local",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "point_t*",
            "name": "p",
            "desc": "坐标点。"
          }
        ],
        "annotation": {},
        "desc": "将控件内的本地坐标转换成全局坐标。",
        "name": "widget_to_global",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "point_t*",
            "name": "p",
            "desc": "坐标点。"
          }
        ],
        "annotation": {},
        "desc": "将控件内的本地坐标转换成屏幕上的坐标。",
        "name": "widget_to_screen",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的名称。",
        "name": "widget_set_name",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "cursor",
            "desc": "名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置鼠标指针的图片名。",
        "name": "widget_set_cursor",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "animation",
            "desc": "动画参数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的动画参数。参数的格式类似函数调用。如:opacity(from=0, to=255, yoyo_times=1000, duration=1000)move(x_from=10, x_to=100, y_from=10, y_to=100, duration=1000)多个animation参数用『;』分开。",
        "name": "widget_set_animation",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "enable",
            "desc": "是否启动。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的可用性。",
        "name": "widget_set_enable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "focused",
            "desc": "是否聚焦。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的是否聚焦。",
        "name": "widget_set_focused",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "widget_state_t",
            "name": "state",
            "desc": "状态。"
          }
        ],
        "annotation": {},
        "desc": "设置控件的状态。",
        "name": "widget_set_state",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint8_t",
            "name": "opacity",
            "desc": "不透明度。"
          }
        ],
        "annotation": {},
        "desc": "设置控件的不透明度。",
        "name": "widget_set_opacity",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁全部子控件。",
        "name": "widget_destroy_children",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "widget_t*",
            "name": "child",
            "desc": "子控件对象。"
          }
        ],
        "annotation": {},
        "desc": "加入一个子控件。",
        "name": "widget_add_child",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "widget_t*",
            "name": "child",
            "desc": "子控件对象。"
          }
        ],
        "annotation": {},
        "desc": "移出指定的子控件(并不销毁)。",
        "name": "widget_remove_child",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": "查找x/y坐标对应的子控件。",
        "name": "widget_find_target",
        "return": {
          "type": "widget*",
          "desc": "子控件或NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "子控件的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "查找指定名称的子控件(同widget_lookup(widget, name, FALSE))。",
        "name": "widget_child",
        "return": {
          "type": "widget_t*",
          "desc": "子控件或NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "子控件的名称。"
          },
          {
            "type": "bool_t",
            "name": "recursive",
            "desc": "是否递归查找全部子控件。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "查找指定名称的子控件。",
        "name": "widget_lookup",
        "return": {
          "type": "widget_t*",
          "desc": "子控件或NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "type",
            "desc": "子控件的名称。"
          },
          {
            "type": "bool_t",
            "name": "recursive",
            "desc": "是否递归查找全部子控件。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "查找指定类型的子控件(返回第一个)。",
        "name": "widget_lookup_by_type",
        "return": {
          "type": "widget_t*",
          "desc": "子控件或NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "visible",
            "desc": "是否可见。"
          },
          {
            "type": "bool_t",
            "name": "recursive",
            "desc": "是否递归设置全部子控件。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的可见性。",
        "name": "widget_set_visible",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "event_type_t",
            "name": "type",
            "desc": "事件类型。"
          },
          {
            "type": "event_func_t",
            "name": "on_event",
            "desc": "事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {
          "scriptable": "custom"
        },
        "desc": "注册指定事件的处理函数。",
        "name": "widget_on",
        "return": {
          "type": "int32_t",
          "desc": "返回id，用于widget_off。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "id",
            "desc": "widget_on返回的ID。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "注销指定事件的处理函数。",
        "name": "widget_off",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "子控件的名称。"
          },
          {
            "type": "event_type_t",
            "name": "type",
            "desc": "事件类型。"
          },
          {
            "type": "event_func_t",
            "name": "on_event",
            "desc": "事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {},
        "desc": "注册指定事件的处理函数。",
        "name": "widget_child_on",
        "return": {
          "type": "int32_t",
          "desc": "返回id，用于widget_off。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "event_type_t",
            "name": "type",
            "desc": "事件类型。"
          },
          {
            "type": "event_func_t",
            "name": "on_event",
            "desc": "事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {},
        "desc": "注销指定事件的处理函数。",
        "name": "widget_off_by_func",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "rect_t*",
            "name": "r",
            "desc": "矩形对象。"
          }
        ],
        "annotation": {},
        "desc": "请求重绘指定的区域，如果widget->dirty已经为TRUE，直接返回。",
        "name": "widget_invalidate",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "强制重绘控件。",
        "name": "widget_invalidate_force",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "画布对象。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": "绘制控件到一个canvas上。",
        "name": "widget_paint",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "event_t*",
            "name": "e",
            "desc": "事件。"
          }
        ],
        "annotation": {},
        "desc": "分发一个事件。",
        "name": "widget_dispatch",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "属性的值。"
          }
        ],
        "annotation": {},
        "desc": "通用的获取控件属性的函数。",
        "name": "widget_get_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "属性的值。"
          }
        ],
        "annotation": {},
        "desc": "通用的设置控件属性的函数。",
        "name": "widget_set_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "char*",
            "name": "v",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "通用的设置控件属性的函数。",
        "name": "widget_set_prop_str",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {},
        "desc": "layout子控件。",
        "name": "widget_layout_children",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "widget_t*",
            "name": "child",
            "desc": "子控件对象。"
          }
        ],
        "annotation": {},
        "desc": "让指定子控件抓住事件。抓住之后，事件由窗口直接分发给该控件。",
        "name": "widget_grab",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "widget_t*",
            "name": "child",
            "desc": "子控件对象。"
          }
        ],
        "annotation": {},
        "desc": "让指定子控件放弃抓住事件。",
        "name": "widget_ungrab",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "tk_visit_t",
            "name": "visit",
            "desc": "遍历的回调函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "回调函数的上下文。"
          }
        ],
        "annotation": {
          "scriptable": "custom"
        },
        "desc": "遍历当前控件及子控件。",
        "name": "widget_foreach",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取当前控件所在的窗口。",
        "name": "widget_get_window",
        "return": {
          "type": "widget_t*",
          "desc": "窗口对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取当前的窗口管理器。",
        "name": "widget_get_window_manager",
        "return": {
          "type": "widget_t*",
          "desc": "窗口管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取当前控件的类型名称。",
        "name": "widget_get_type",
        "return": {
          "type": "char*",
          "desc": "返回类型名。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "event_t*",
            "name": "e",
            "desc": "事件。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": "递归的分发一个事件到所有target子控件。",
        "name": "widget_dispatch_to_target",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "event_t*",
            "name": "e",
            "desc": "事件。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": "递归的分发一个事件到所有key_target子控件。",
        "name": "widget_dispatch_to_key_target",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "clone新控件的parent对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "clone。",
        "name": "widget_clone",
        "return": {
          "type": "widget_t*",
          "desc": "返回clone的对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "widget_t*",
            "name": "other",
            "desc": "要比较的控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "判断两个widget是否相同。",
        "name": "widget_equal",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示相同，否则表示不同。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "x",
            "desc": "x布局参数"
          },
          {
            "type": "char*",
            "name": "y",
            "desc": "y布局参数"
          },
          {
            "type": "char*",
            "name": "w",
            "desc": "w布局参数"
          },
          {
            "type": "char*",
            "name": "h",
            "desc": "h布局参数"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置widget自身的layout参数。",
        "name": "widget_set_self_layout_params",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "params",
            "desc": "子控件布局参数(参考docs/layout.md)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置widget子控件的layout参数。",
        "name": "widget_set_children_layout_params",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "重新排版widget及其子控件。",
        "name": "widget_layout",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为widget对象(供脚本语言使用)。",
        "name": "widget_cast",
        "return": {
          "type": "widget_t*",
          "desc": "widget对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "销毁控件。",
        "name": "widget_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "画布对象。"
          },
          {
            "type": "char*",
            "name": "icon",
            "desc": "图标的名称。"
          },
          {
            "type": "wstr_t*",
            "name": "text",
            "desc": "文字。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": "帮助子控件实现自己的绘制函数。",
        "name": "widget_paint_helper",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "画布对象。"
          }
        ],
        "annotation": {
          "private": true
        },
        "desc": "从widget的style中取出字体名称、大小和颜色数据，设置到canvas中。",
        "name": "widget_prepare_text_style",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "wchar_t*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {},
        "desc": "计算文本的宽度。",
        "name": "widget_measure_text",
        "return": {
          "type": "float_t",
          "desc": "返回文本的宽度。"
        }
      }
    ],
    "properties": [
      {
        "name": "x",
        "desc": "x坐标。",
        "type": "xy_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "y",
        "desc": "y坐标。",
        "type": "xy_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "w",
        "desc": "宽度。",
        "type": "wh_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "h",
        "desc": "高度。",
        "type": "wh_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "name",
        "desc": "控件名字。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "tr_text",
        "desc": "如果需要在切换语言时实时生效，则需要保存用于翻译的字符串tr_text。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "style",
        "desc": "Style Type。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "animation",
        "desc": "动画参数。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "enable",
        "desc": "启用/禁用状态。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "visible",
        "desc": "是否可见。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "writable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "focused",
        "desc": "是否得到焦点。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "auto_created",
        "desc": "是否有父控件自动创建。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "dirty",
        "desc": "标识控件是否需要重绘。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "state",
        "desc": "控件的状态。",
        "type": "uint8_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "opacity;",
        "desc": "不透明度(0-255)，0完全透明，255完全不透明。",
        "type": "uint8_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "text",
        "desc": "文本。用途视具体情况而定。",
        "type": "wstr_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "parent",
        "desc": "父控件",
        "type": "widget_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "target",
        "desc": "接收事件的子控件。",
        "type": "widget_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "grab_widget",
        "desc": "grab事件的子控件。",
        "type": "widget_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "key_target",
        "desc": "接收按键事件的子控件。",
        "type": "widget_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "children",
        "desc": "全部子控件。",
        "type": "array_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "emitter",
        "desc": "事件发射器。",
        "type": "emitter*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "style_data",
        "desc": "Style数据。",
        "type": "style_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "layout_params",
        "desc": "布局参数。",
        "type": "layout_params_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "custom_props",
        "desc": "自定义属性。",
        "type": "custom_props_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "vt",
        "desc": "虚函数表。",
        "type": "widget_vtable_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/widget.h",
    "desc": "窗口基类。",
    "name": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "enum",
    "desc": "@type string窗口动画常量定义。",
    "consts": [
      {
        "desc": "中心缩放。适用于居中的对话框。",
        "name": "WINDOW_ANIMATOR_CENTER_SCALE"
      },
      {
        "desc": "淡入淡出。适用于toast之类的提示。",
        "name": "WINDOW_ANIMATOR_FADE,"
      },
      {
        "desc": "顶部部弹出。适用于对话框。",
        "name": "WINDOW_ANIMATOR_TOP_TOP_BOTTOM"
      },
      {
        "desc": "底部弹出。适用于对话框。",
        "name": "WINDOW_ANIMATOR_BOTTOM_TO_TOP"
      },
      {
        "desc": "水平平移。适用于窗口。",
        "name": "WINDOW_ANIMATOR_HTRANSLATE"
      },
      {
        "desc": "垂直平移。适用于窗口。",
        "name": "WINDOW_ANIMATOR_VTRANSLATE"
      }
    ],
    "header": "base/window_animator.h",
    "name": "window_animator_type_t",
    "prefix": "WINDOW_ANIMATOR_"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "char*",
            "name": "type",
            "desc": "动画类型。"
          },
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas。"
          },
          {
            "type": "widget_t*",
            "name": "prev_win",
            "desc": "前一窗口。"
          },
          {
            "type": "widget_t*",
            "name": "curr_win",
            "desc": "当前窗口。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "为打开窗口创建动画。",
        "name": "window_animator_create_for_open",
        "return": {
          "type": "window_animator_t*",
          "desc": "窗口动画对象。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "type",
            "desc": "动画类型。"
          },
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "canvas。"
          },
          {
            "type": "widget_t*",
            "name": "prev_win",
            "desc": "前一窗口。"
          },
          {
            "type": "widget_t*",
            "name": "curr_win",
            "desc": "当前窗口。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "为关闭窗口创建动画。",
        "name": "window_animator_create_for_close",
        "return": {
          "type": "window_animator_t*",
          "desc": "窗口动画对象。"
        }
      },
      {
        "params": [
          {
            "type": "window_animator_t*",
            "name": "wa",
            "desc": "窗口动画对象。"
          },
          {
            "type": "canvas_t*",
            "name": "canvas",
            "desc": "画布对象。"
          },
          {
            "type": "uint32_t",
            "name": "time_ms",
            "desc": "当前时间(毫秒)。"
          }
        ],
        "annotation": {},
        "desc": "更新动画。",
        "name": "window_animator_update",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "window_animator_t*",
            "name": "wa",
            "desc": "窗口动画对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁窗口动画对象。",
        "name": "window_animator_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [],
    "header": "base/window_animator.h",
    "desc": "窗口动画。",
    "name": "window_animator_t"
  },
  {
    "type": "class",
    "methods": [],
    "properties": [
      {
        "name": "theme",
        "desc": "主题资源的名称。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "script",
        "desc": "脚本文件名称(暂时没用)。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true
        }
      },
      {
        "name": "open_anim_hint",
        "desc": "打开时的动画名称。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true
        }
      },
      {
        "name": "close_anim_hint",
        "desc": "关闭时的动画名称。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true
        }
      },
      {
        "name": "stage",
        "desc": "窗口当前处于的状态。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/window_base.h",
    "desc": "窗口。",
    "name": "window_base_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "获取全局window_manager对象",
        "name": "window_manager",
        "alias": "window_manager_instance",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "window_manager对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为window_manager对象(供脚本语言使用)。",
        "name": "window_manager_cast",
        "return": {
          "type": "widget_t*",
          "desc": "window_manager对象。"
        }
      },
      {
        "params": [
          {
            "type": "window_manager_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          }
        ],
        "annotation": {},
        "desc": "设置缺省的窗口管理器。",
        "name": "window_manager_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "创建窗口管理器。",
        "name": "window_manager_create",
        "return": {
          "type": "window_manager_t*",
          "desc": "返回窗口管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "window_manager_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始化窗口管理器。",
        "name": "window_manager_init",
        "return": {
          "type": "widget_t*",
          "desc": "返回窗口管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "window_manager_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          }
        ],
        "annotation": {},
        "desc": "获取最上面的主窗口。",
        "name": "window_manager_get_top_main_window",
        "return": {
          "type": "widget_t*",
          "desc": "返回窗口对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {},
        "desc": "调整窗口管理器的大小。",
        "name": "window_manager_resize",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          },
          {
            "type": "widget_t*",
            "name": "window",
            "desc": "窗口对象。"
          }
        ],
        "annotation": {},
        "desc": "打开窗口。",
        "name": "window_manager_open_window",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          },
          {
            "type": "widget_t*",
            "name": "window",
            "desc": "窗口对象。"
          }
        ],
        "annotation": {},
        "desc": "关闭窗口。",
        "name": "window_manager_close_window",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          },
          {
            "type": "canvas_t*",
            "name": "c",
            "desc": "画布。"
          }
        ],
        "annotation": {},
        "desc": "绘制。",
        "name": "window_manager_paint",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          },
          {
            "type": "event_t*",
            "name": "e",
            "desc": "事件对象。"
          }
        ],
        "annotation": {},
        "desc": "分发输入事件。",
        "name": "window_manager_dispatch_input_event",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          },
          {
            "type": "bool_t",
            "name": "show_fps",
            "desc": "是否显示FPS。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否显示FPS。",
        "name": "window_manager_set_show_fps",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "窗口管理器对象。"
          },
          {
            "type": "const char*",
            "name": "cursor",
            "desc": "图片名称(从图片管理器中加载)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置鼠标指针。",
        "name": "window_manager_set_cursor",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "show_fps",
        "desc": "是否显示fps。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "base/window_manager.h",
    "desc": "窗口管理器。",
    "name": "window_manager_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建window对象",
        "name": "window_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "name",
            "desc": "window_base的名称。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "从资源文件中加载并创建window_base对象。本函数在ui_loader/ui_builder_default里实现。",
        "name": "window_open",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "name",
            "desc": "window_base的名称。"
          },
          {
            "type": "widget_t*",
            "name": "to_close",
            "desc": "关闭该窗口。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "从资源文件中加载并创建window_base对象。本函数在ui_loader/ui_builder_default里实现。",
        "name": "window_open_and_close",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "window_base对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true
        },
        "desc": "关闭窗口。",
        "name": "window_close",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "window对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为window对象(供脚本语言使用)。",
        "name": "window_cast",
        "return": {
          "type": "widget_t*",
          "desc": "window对象。"
        }
      }
    ],
    "properties": [],
    "header": "base/window.h",
    "desc": "窗口。",
    "name": "window_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint16_t",
            "name": "capacity",
            "desc": "初始容量。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始化字符串对象。",
        "name": "wstr_init",
        "return": {
          "type": "wstr_t*",
          "desc": "str对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "wchar_t*",
            "name": "text",
            "desc": "要设置的字符串。"
          }
        ],
        "annotation": {},
        "desc": "设置字符串。",
        "name": "wstr_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要设置的字符串。"
          }
        ],
        "annotation": {},
        "desc": "设置UTF8字符串。",
        "name": "wstr_set_utf8",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "返回的字符串。"
          },
          {
            "type": "uint16_t",
            "name": "size",
            "desc": "text最大长度。"
          }
        ],
        "annotation": {},
        "desc": "获取UTF8字符串。",
        "name": "wstr_get_utf8",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint16_t",
            "name": "offset",
            "desc": "指定的位置。"
          },
          {
            "type": "uint16_t",
            "name": "nr",
            "desc": "要删除的字符数。"
          }
        ],
        "annotation": {},
        "desc": "删除指定范围的字符。",
        "name": "wstr_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint16_t",
            "name": "offset",
            "desc": "指定的位置。"
          },
          {
            "type": "wchar_t*",
            "name": "text",
            "desc": "待插入的文本。"
          },
          {
            "type": "uint16_t",
            "name": "nr",
            "desc": "要插入的字符数。"
          }
        ],
        "annotation": {},
        "desc": "在指定位置插入字符串。",
        "name": "wstr_insert",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "wchar_t",
            "name": "c",
            "desc": "字符。"
          }
        ],
        "annotation": {},
        "desc": "追加一个字符。",
        "name": "wstr_push",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": "删除尾部字符。",
        "name": "wstr_pop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "wstr_t*",
            "name": "other",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": "判断两个字符是否相同。",
        "name": "wstr_equal",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示相同，否则表示不同。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "int32_t",
            "name": "v",
            "desc": "整数。"
          }
        ],
        "annotation": {},
        "desc": "用整数初始化字符串。",
        "name": "wstr_from_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "double",
            "name": "v",
            "desc": "浮点数。"
          }
        ],
        "annotation": {},
        "desc": "用浮点数初始化字符串。",
        "name": "wstr_from_float",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "value_t",
            "name": "v",
            "desc": "value。"
          }
        ],
        "annotation": {},
        "desc": "用value初始化字符串。",
        "name": "wstr_from_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "int32_t*",
            "name": "v",
            "desc": "用于返回整数。"
          }
        ],
        "annotation": {},
        "desc": "将字符串转成整数。",
        "name": "wstr_to_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "double*",
            "name": "v",
            "desc": "用于返回浮点数。"
          }
        ],
        "annotation": {},
        "desc": "将字符串转成浮点数。",
        "name": "wstr_to_float",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "double",
            "name": "delta",
            "desc": "要加上的值。"
          }
        ],
        "annotation": {},
        "desc": "将字符串转成浮点数，加上delta，再转换回来。",
        "name": "wstr_add_float",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": "去掉浮点数小数点尾部的零。",
        "name": "wstr_trim_float_zero",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": "重置字符串为空。",
        "name": "wstr_reset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "size",
        "desc": "长度。",
        "type": "uint16_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "capacity",
        "desc": "容量。",
        "type": "uint16_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "str",
        "desc": "字符串。",
        "type": "wchar_t*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/wstr.h",
    "desc": "可变长度的宽字符字符串。",
    "name": "wstr_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建color_component对象",
        "name": "color_component_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "color_t",
            "name": "c",
            "desc": "颜色。"
          }
        ],
        "annotation": {},
        "desc": "设置颜色。",
        "name": "color_component_set_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "color_component对象。"
          }
        ],
        "annotation": {},
        "desc": "获取h分量。",
        "name": "color_component_get_h",
        "return": {
          "type": "float",
          "desc": "返回h分量。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "color_component对象。"
          }
        ],
        "annotation": {},
        "desc": "获取s分量。",
        "name": "color_component_get_s",
        "return": {
          "type": "float",
          "desc": "返回s分量。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "color_component对象。"
          }
        ],
        "annotation": {},
        "desc": "获取v分量。",
        "name": "color_component_get_v",
        "return": {
          "type": "float",
          "desc": "返回v分量。"
        }
      }
    ],
    "properties": [],
    "header": "color_picker/color_component.h",
    "desc": "颜色选择器的颜色分量。控件的名称有严格规定：COLOR_PICKER_CHILD_SV: 水平为Value/Brightness(递增)，垂直为Saturation(递减)。COLOR_PICKER_CHILD_H: 水平为同色，垂直为Hue(递减)。",
    "name": "color_component_t",
    "parent": "widget_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建color_picker对象",
        "name": "color_picker_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "color",
            "desc": "颜色。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置颜色。",
        "name": "color_picker_set_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "color_picker对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为color_picker对象(供脚本语言使用)。",
        "name": "color_picker_cast",
        "return": {
          "type": "widget_t*",
          "desc": "color_picker对象。"
        }
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": "颜色。",
        "type": "const char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "color_picker/color_picker.h",
    "desc": "颜色选择器。 其中的控件必须按下列规则命名：COLOR_PICKER_CHILD_R 红色分量。可以是spin_box、edit和slider。COLOR_PICKER_CHILD_G 绿色分量。可以是spin_box、edit和slider。COLOR_PICKER_CHILD_B 蓝色分量。可以是spin_box、edit和slider。COLOR_PICKER_CHILD_H Hue分量。可以是spin_box、edit、slider和color_component。COLOR_PICKER_CHILD_S Saturation分量。可以是spin_box、edit和slider。COLOR_PICKER_CHILD_V Value/Brightness分量。可以是spin_box、edit和slider。COLOR_PICKER_CHILD_SV Saturation和Value/Brightness分量。可以是color_component。COLOR_PICKER_CHILD_OLD 旧的值。可以是spin_box、edit和color_tile。COLOR_PICKER_CHILD_NEW 新的值。可以是spin_box、edit和color_tile。",
    "name": "color_picker_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "params": [],
    "annotation": {
      "global": true,
      "scriptable": true
    },
    "desc": "初始化AWTK扩展控件。",
    "name": "tk_ext_widgets_init",
    "return": {
      "type": "ret_t",
      "desc": "返回RET_OK表示成功，否则表示失败。"
    },
    "type": "method",
    "header": "ext_widgets/ext_widgets.h"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建guage对象",
        "name": "guage_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "guage对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为guage对象(供脚本语言使用)。",
        "name": "guage_cast",
        "return": {
          "type": "widget_t*",
          "desc": "guage对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "angle",
            "desc": "指针角度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指针角度。12点钟方向为0度，顺时钟方向为正，单位为度。",
        "name": "guage_set_angle",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "angle",
            "desc": "指针的图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指针的图片。",
        "name": "guage_set_pointer_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "bg_image",
            "desc": "背景图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置背景图片。",
        "name": "guage_set_bg_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "angle",
        "desc": "指针角度。12点钟方向为0度，顺时钟方向为正，单位为度。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "bg_image",
        "desc": "背景图片。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "pointer_image",
        "desc": "指针图片。图片须垂直向上，图片的中心点为旋转方向。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "guage/guage.h",
    "desc": "仪表控件。",
    "name": "guage_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建image_animation对象",
        "name": "image_animation_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          },
          {
            "type": "bool_t",
            "name": "loop",
            "desc": "是否循环播放。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否循环播放。",
        "name": "image_animation_set_loop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          },
          {
            "type": "const char*",
            "name": "image",
            "desc": "图片前缀。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置图片前缀。",
        "name": "image_animation_set_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          },
          {
            "type": "uint32_t",
            "name": "interval",
            "desc": "间隔时间(毫秒)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置播放间隔时间。",
        "name": "image_animation_set_interval",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          },
          {
            "type": "uint32_t",
            "name": "delay",
            "desc": "延迟播放时间(毫秒)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置延迟播放时间(仅适用于自动播放)。",
        "name": "image_animation_set_delay",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          },
          {
            "type": "bool_t",
            "name": "auto_play",
            "desc": "是否自动播放。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否自动播放。",
        "name": "image_animation_set_auto_play",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          },
          {
            "type": "const char*",
            "name": "sequence",
            "desc": "播放序列。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置播放序列。比如image为\"fire\"，sequence为\"123\", 将依次播放\"fire1\", \"fire2\", \"fire3\"。",
        "name": "image_animation_set_sequence",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "播放。",
        "name": "image_animation_play",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "停止(并重置index为0)。",
        "name": "image_animation_stop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "暂停。",
        "name": "image_animation_pause",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "image_animation对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为image_animation对象(供脚本语言使用)。",
        "name": "image_animation_cast",
        "return": {
          "type": "widget_t*",
          "desc": "image_animation对象。"
        }
      }
    ],
    "properties": [
      {
        "name": "image",
        "desc": "图片名称的前缀。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "sequence",
        "desc": "播放的序列，字符可选值为:0-9,a-z,A-Z。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "loop",
        "desc": "是否循环播放。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "auto_play",
        "desc": "是否自动播放。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "interval",
        "desc": "每张图片播放的时间(毫秒)。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "delay",
        "desc": "自动播放时延迟播放的时间(毫秒)。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "image_animation/image_animation.h",
    "desc": "图片动画控件，指定一个图片前缀，依次显示指定序列的图片，从而形成动画效果。",
    "name": "image_animation_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建candidates对象",
        "name": "candidates_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      }
    ],
    "properties": [],
    "header": "keyboard/candidates.h",
    "desc": "输入法候选字词控件。",
    "name": "candidates_t",
    "parent": "widget_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建keyboard对象",
        "name": "keyboard_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "keyboard对象。"
          }
        ],
        "annotation": {
          "deconstructor": true
        },
        "desc": "关闭keyboard窗口。",
        "name": "keyboard_close",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [],
    "header": "keyboard/keyboard.h",
    "desc": "键盘。",
    "name": "keyboard_t",
    "parent": "widget_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建rich_text对象",
        "name": "rich_text_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置文本。",
        "name": "rich_text_set_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "line_gap",
        "desc": "行间距。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "rich_text/rich_text.h",
    "desc": "rich_text控件，实现简单的图文混排。",
    "name": "rich_text_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建list_item对象",
        "name": "list_item_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "list_item对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为list_item对象(供脚本语言使用)。",
        "name": "list_item_cast",
        "return": {
          "type": "widget_t*",
          "desc": "list_item对象。"
        }
      }
    ],
    "properties": [],
    "header": "scroll_view/list_item.h",
    "desc": "list item控件。",
    "name": "list_item_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建list_view_h对象",
        "name": "list_view_h_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "item_width",
            "desc": "列表项的宽度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置列表项的宽度。",
        "name": "list_view_h_set_item_width",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "spacing",
            "desc": "列表项的间距。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置列表项的间距。",
        "name": "list_view_h_set_spacing",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "list_view_h对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为list_view_h对象(供脚本语言使用)。",
        "name": "list_view_h_cast",
        "return": {
          "type": "widget_t*",
          "desc": "list_view_h对象。"
        }
      }
    ],
    "properties": [
      {
        "name": "item_width",
        "desc": "列表项的宽度。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "spacing",
        "desc": "间距。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "scroll_view/list_view_h.h",
    "desc": "水平ListView控件。",
    "name": "list_view_h_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建list_view对象",
        "name": "list_view_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "item_height",
            "desc": "列表项的高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置列表项的高度。",
        "name": "list_view_set_item_height",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "default_item_height",
            "desc": "列表项的高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置列表项的缺省高度。",
        "name": "list_view_set_default_item_height",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "auto_hide_scroll_bar",
            "desc": "列表项的高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否自动隐藏滚动条。",
        "name": "list_view_set_auto_hide_scroll_bar",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "list_view对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为list_view对象(供脚本语言使用)。",
        "name": "list_view_cast",
        "return": {
          "type": "widget_t*",
          "desc": "list_view对象。"
        }
      }
    ],
    "properties": [
      {
        "name": "item_height",
        "desc": "列表项的高度。如果 item_height > 0，所有列表项使用固定高度，否则使用列表项自身的高度。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "default_item_height",
        "desc": "列表项的缺省高度。如果item_height <= 0 而且列表项自身的高度 <= 0，则使用缺省高度。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "auto_hide_scroll_bar",
        "desc": "如果不需要滚动条时，自动隐藏滚动条。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "scroll_view/list_view.h",
    "desc": "ListView控件。",
    "name": "list_view_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建scroll_bar对象(根据宏WITH_DESKTOP_STYLE决定创建desktop风格还是mobile风格的滚动条)",
        "name": "scroll_bar_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为scroll_bar对象(供脚本语言使用)。",
        "name": "scroll_bar_cast",
        "return": {
          "type": "widget_t*",
          "desc": "scroll_bar对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建mobile风格的scroll_bar对象",
        "name": "scroll_bar_create_mobile",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建desktop风格的scroll_bar对象",
        "name": "scroll_bar_create_desktop",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar控件。"
          },
          {
            "type": "int32_t",
            "name": "virtual_size",
            "desc": "最大值。"
          },
          {
            "type": "int32_t",
            "name": "row",
            "desc": "每一行的高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置参数。",
        "name": "scroll_bar_set_params",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar控件。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          },
          {
            "type": "int32_t",
            "name": "duration",
            "desc": "时间。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "滚动到指定的值。",
        "name": "scroll_bar_scroll_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar控件。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置值，并触发EVT_VALUE_CHANGED事件。",
        "name": "scroll_bar_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar控件。"
          },
          {
            "type": "int32_t",
            "name": "delta",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "在当前的值上增加一个值，并触发EVT_VALUE_CHANGED事件。",
        "name": "scroll_bar_add_delta",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar控件。"
          },
          {
            "type": "int32_t",
            "name": "delta",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "在当前的值上增加一个值，并滚动到新的值，并触发EVT_VALUE_CHANGED事件。",
        "name": "scroll_bar_scroll_delta",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar控件。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置值，但不触发EVT_VALUE_CHANGED事件。",
        "name": "scroll_bar_set_value_only",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_bar控件。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "判断是否是mobile风格的滚动条。",
        "name": "scroll_bar_is_mobile",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示是mobile风格的，否则表示不是mobile风格的。"
        }
      }
    ],
    "properties": [
      {
        "name": "virtual_size",
        "desc": "虚拟宽度或高度。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "value",
        "desc": "当前的值。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "row",
        "desc": "行的高度。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "animatable",
        "desc": "滚动时是否启用动画。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "scroll_view/scroll_bar.h",
    "desc": "scroll_bar控件。",
    "name": "scroll_bar_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建scroll_view对象",
        "name": "scroll_view_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "scroll_view对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为scroll_view对象(供脚本语言使用)。",
        "name": "scroll_view_cast",
        "return": {
          "type": "widget_t*",
          "desc": "scroll_view对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "虚拟宽度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置虚拟宽度。",
        "name": "scroll_view_set_virtual_w",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "虚拟高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置虚拟高度。",
        "name": "scroll_view_set_virtual_h",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "xslidable",
            "desc": "是否允许滑动。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否允许x方向滑动。",
        "name": "scroll_view_set_xslidable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "yslidable",
            "desc": "是否允许滑动。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否允许y方向滑动。",
        "name": "scroll_view_set_yslidable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "xoffset",
            "desc": "x偏移量。"
          },
          {
            "type": "int32_t",
            "name": "yoffset",
            "desc": "y偏移量。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置偏移量。",
        "name": "scroll_view_set_offset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "xoffset_end",
            "desc": "x偏移量。"
          },
          {
            "type": "int32_t",
            "name": "yoffset_end",
            "desc": "y偏移量。"
          },
          {
            "type": "int32_t",
            "name": "duration",
            "desc": "时间。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "滚动到指定的偏移量。",
        "name": "scroll_view_scroll_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "virtual_w",
        "desc": "虚拟宽度。",
        "type": "wh_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "virtual_h",
        "desc": "虚拟高度。",
        "type": "wh_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "xoffset",
        "desc": "x偏移量。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "yoffset",
        "desc": "y偏移量。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "xslidable",
        "desc": "是否允许x方向滑动。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "yslidable",
        "desc": "是否允许y方向滑动。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "scroll_view/scroll_view.h",
    "desc": "滚动视图。",
    "name": "scroll_view_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建slide_view对象",
        "name": "slide_view_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_view对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为slide_view对象(供脚本语言使用)。",
        "name": "slide_view_cast",
        "return": {
          "type": "widget_t*",
          "desc": "slide_view对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_view对象。"
          },
          {
            "type": "uint16_t",
            "name": "auto_play",
            "desc": "0表示禁止自动播放，非0表示自动播放时每一页播放的时间。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置为自动播放模式。",
        "name": "slide_view_set_auto_play",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_view对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "当前页的序号。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置当前页的序号。",
        "name": "slide_view_set_active",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "slide_view对象。"
          },
          {
            "type": "bool_t",
            "name": "vertical",
            "desc": "TRUE表示上下滑动，FALSE表示左右滑动。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置为上下滑动(缺省为左右滑动)。",
        "name": "slide_view_set_vertical",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "vertical",
        "desc": "是否为上下滑动模式。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "auto_play",
        "desc": "自动播放。0表示禁止自动播放，非0表示自动播放时每一页播放的时间。",
        "type": "uint16_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "slide_view/slide_view.h",
    "desc": "slide view。",
    "name": "slide_view_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建switch对象",
        "name": "switch_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "switch对象。"
          },
          {
            "type": "bool_t",
            "name": "value",
            "desc": "值"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置控件的值。",
        "name": "switch_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "switch对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换switch对象(供脚本语言使用)。",
        "name": "switch_cast",
        "return": {
          "type": "widget_t*",
          "desc": "switch对象。"
        }
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": "值。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "max_xoffset_ratio",
        "desc": "当开关处于关闭时，图片偏移相对于图片宽度的比例(缺省为1/3)。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "round_radius",
        "desc": "图片的圆角半径。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "switch/switch.h",
    "desc": "开关控件。",
    "name": "switch_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建text_selector对象",
        "name": "text_selector_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换text_selector对象(供脚本语言使用)。",
        "name": "text_selector_cast",
        "return": {
          "type": "widget_t*",
          "desc": "text_selector对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "重置所有选项。",
        "name": "text_selector_reset_options",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取选项个数。",
        "name": "text_selector_count_options",
        "return": {
          "type": "int32_t",
          "desc": "返回选项个数。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "追加一个选项。",
        "name": "text_selector_append_option",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "char*",
            "name": "options",
            "desc": "选项。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置选项。",
        "name": "text_selector_set_options",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "int32_t",
            "name": "start",
            "desc": "起始值。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "个数。"
          },
          {
            "type": "int32_t",
            "name": "step",
            "desc": "步长。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置一系列的整数选项。",
        "name": "text_selector_set_range_options",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "选项的索引。"
          }
        ],
        "annotation": {},
        "desc": "获取第index个选项。",
        "name": "text_selector_get_option",
        "return": {
          "type": "text_selector_option_t*",
          "desc": "成功返回选项，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取text_selector的值。",
        "name": "text_selector_get_value",
        "return": {
          "type": "int32_t",
          "desc": "返回值。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置text_selector的值。",
        "name": "text_selector_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取text_selector的文本。",
        "name": "text_selector_get_text",
        "return": {
          "type": "char*",
          "desc": "返回文本。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "const char*",
            "name": "text",
            "desc": "文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置text_selector的文本。",
        "name": "text_selector_set_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "选项的索引。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置第index个选项为当前选中的选项。",
        "name": "text_selector_set_selected_index",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "text_selector对象。"
          },
          {
            "type": "uint32_t",
            "name": "visible_nr",
            "desc": "选项数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置可见的选项数。",
        "name": "text_selector_set_visible_nr",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "visible_nr",
        "desc": "可见的选项数量(只能是3或者5，缺省为5)。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "selected_index",
        "desc": "当前选中的选项。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "options",
        "desc": "设置可选项(冒号分隔值和文本，分号分隔选项，如:1:red;2:green;3:blue)。对于数值选项，也可以指定一个范围，用『-』分隔起始值和结束值，如：\"1-7\"表示1到7。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "text_selector/text_selector.h",
    "desc": "文本选择器控件，通常用于选择年月日等。XXX: 目前需要先设置options和visible_nr，再设置其它参数(在XML中也需要按此顺序)。",
    "name": "text_selector_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建time_clock对象",
        "name": "time_clock_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "time_clock对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为time_clock对象(供脚本语言使用)。",
        "name": "time_clock_cast",
        "return": {
          "type": "widget_t*",
          "desc": "time_clock对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "hour",
            "desc": "小时的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置小时的值。",
        "name": "time_clock_set_hour",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "minute",
            "desc": "分钟的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置分钟的值。",
        "name": "time_clock_set_minute",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "second",
            "desc": "秒的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置秒的值。",
        "name": "time_clock_set_second",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "hour",
            "desc": "小时的图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置小时的图片。",
        "name": "time_clock_set_hour_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "minute_image",
            "desc": "分钟的图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置分钟的图片。",
        "name": "time_clock_set_minute_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "second_image",
            "desc": "秒的图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置秒的图片。",
        "name": "time_clock_set_second_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "bg_image",
            "desc": "背景图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置背景图片。",
        "name": "time_clock_set_bg_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "image",
            "desc": "图片。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置图片。",
        "name": "time_clock_set_image",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [
      {
        "name": "hour",
        "desc": "小时。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "minute",
        "desc": "分钟。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "second",
        "desc": "秒。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "image",
        "desc": "中心图片。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "bg_image",
        "desc": "背景图片。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "hour_image",
        "desc": "时针图片。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "minute_image",
        "desc": "分针图片。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "second_image",
        "desc": "秒针图片。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "time_clock/time_clock.h",
    "desc": "时钟控件。",
    "name": "time_clock_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true
    }
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "duration",
            "desc": "动画持续时间。"
          },
          {
            "type": "uint32_t",
            "name": "delay",
            "desc": "动画执行时间。"
          },
          {
            "type": "easing_type_t",
            "name": "easing",
            "desc": "插值函数类型。"
          }
        ],
        "annotation": {},
        "desc": "创建动画对象。",
        "name": "widget_animator_move_create",
        "return": {
          "type": "widget_animator_t*",
          "desc": "成功返回动画对象，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象本身。"
          },
          {
            "type": "xy_t",
            "name": "x_from",
            "desc": "x起点值。"
          },
          {
            "type": "xy_t",
            "name": "y_from",
            "desc": "y起点值。"
          },
          {
            "type": "xy_t",
            "name": "x_to",
            "desc": "x终点值。"
          },
          {
            "type": "xy_t",
            "name": "y_to",
            "desc": "y终点值。"
          }
        ],
        "annotation": {},
        "desc": "设置动画对象的参数。",
        "name": "widget_animator_move_set_params",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [],
    "header": "widget_animators/widget_animator_move.h",
    "desc": "移动控件位置的动画。",
    "name": "widget_animator_move_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "duration",
            "desc": "动画持续时间。"
          },
          {
            "type": "uint32_t",
            "name": "delay",
            "desc": "动画执行时间。"
          },
          {
            "type": "easing_type_t",
            "name": "easing",
            "desc": "插值函数类型。"
          }
        ],
        "annotation": {},
        "desc": "创建动画对象。",
        "name": "widget_animator_opacity_create",
        "return": {
          "type": "widget_animator_t*",
          "desc": "成功返回动画对象，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象本身。"
          },
          {
            "type": "uint8_t",
            "name": "from",
            "desc": "opacity起始值。"
          },
          {
            "type": "uint8_t",
            "name": "to",
            "desc": "opacity结束值。"
          }
        ],
        "annotation": {},
        "desc": "设置动画对象的参数。",
        "name": "widget_animator_opacity_set_params",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [],
    "header": "widget_animators/widget_animator_opacity.h",
    "desc": "改变控件透明度的动画。",
    "name": "widget_animator_opacity_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "duration",
            "desc": "动画持续时间。"
          },
          {
            "type": "uint32_t",
            "name": "delay",
            "desc": "动画执行时间。"
          },
          {
            "type": "easing_type_t",
            "name": "easing",
            "desc": "插值函数类型。"
          }
        ],
        "annotation": {},
        "desc": "创建动画对象。",
        "name": "widget_animator_value_create",
        "return": {
          "type": "widget_animator_t*",
          "desc": "成功返回动画对象，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象本身。"
          },
          {
            "type": "float_t",
            "name": "from",
            "desc": "rotation起始值。"
          },
          {
            "type": "float_t",
            "name": "to",
            "desc": "rotation结束值。"
          }
        ],
        "annotation": {},
        "desc": "设置动画对象的参数。",
        "name": "widget_animator_rotation_set_params",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [],
    "header": "widget_animators/widget_animator_rotation.h",
    "desc": "改变控件旋转角度的动画。",
    "name": "widget_animator_rotation_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "duration",
            "desc": "动画持续时间。"
          },
          {
            "type": "uint32_t",
            "name": "delay",
            "desc": "动画执行时间。"
          },
          {
            "type": "easing_type_t",
            "name": "easing",
            "desc": "插值函数类型。"
          }
        ],
        "annotation": {},
        "desc": "创建动画对象。",
        "name": "widget_animator_scale_create",
        "return": {
          "type": "widget_animator_t*",
          "desc": "成功返回动画对象，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象本身。"
          },
          {
            "type": "xy_t",
            "name": "x_from",
            "desc": "x方向起始缩放比例。"
          },
          {
            "type": "xy_t",
            "name": "y_from",
            "desc": "y方向起始缩放比例。"
          },
          {
            "type": "xy_t",
            "name": "x_to",
            "desc": "x方向结束缩放比例。"
          },
          {
            "type": "xy_t",
            "name": "y_to",
            "desc": "y方向结束缩放比例。"
          }
        ],
        "annotation": {},
        "desc": "设置动画对象的参数。",
        "name": "widget_animator_scale_set_params",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [],
    "header": "widget_animators/widget_animator_scale.h",
    "desc": "控件缩放动画。",
    "name": "widget_animator_scale_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "duration",
            "desc": "动画持续时间。"
          },
          {
            "type": "uint32_t",
            "name": "delay",
            "desc": "动画执行时间。"
          },
          {
            "type": "easing_type_t",
            "name": "easing",
            "desc": "插值函数类型。"
          }
        ],
        "annotation": {},
        "desc": "创建动画对象。",
        "name": "widget_animator_scroll_create",
        "return": {
          "type": "widget_animator_t*",
          "desc": "成功返回动画对象，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象本身。"
          },
          {
            "type": "xy_t",
            "name": "x_from",
            "desc": "x起点值。"
          },
          {
            "type": "xy_t",
            "name": "y_from",
            "desc": "y起点值。"
          },
          {
            "type": "xy_t",
            "name": "x_to",
            "desc": "x终点值。"
          },
          {
            "type": "xy_t",
            "name": "y_to",
            "desc": "y终点值。"
          }
        ],
        "annotation": {},
        "desc": "设置动画对象的参数。",
        "name": "widget_animator_scroll_set_params",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [],
    "header": "widget_animators/widget_animator_scroll.h",
    "desc": "移动控件位置的动画。",
    "name": "widget_animator_scroll_t"
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "duration",
            "desc": "动画持续时间。"
          },
          {
            "type": "uint32_t",
            "name": "delay",
            "desc": "动画执行时间。"
          },
          {
            "type": "easing_type_t",
            "name": "easing",
            "desc": "插值函数类型。"
          }
        ],
        "annotation": {},
        "desc": "创建动画对象。",
        "name": "widget_animator_value_create",
        "return": {
          "type": "widget_animator_t*",
          "desc": "成功返回动画对象，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象本身。"
          },
          {
            "type": "int32_t",
            "name": "from",
            "desc": "value起始值。"
          },
          {
            "type": "int32_t",
            "name": "to",
            "desc": "value结束值。"
          }
        ],
        "annotation": {},
        "desc": "设置动画对象的参数。",
        "name": "widget_animator_value_set_params",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "properties": [],
    "header": "widget_animators/widget_animator_value.h",
    "desc": "改变控件值的动画。",
    "name": "widget_animator_value_t"
  }
]